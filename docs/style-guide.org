* Style Guide

To increase readability, I'll try to unify how things are generally
structured.

** General musings

I'd like to move away from the cramped Lisp I've been writing to
something I term a "relaxed" style. It's important to let code
breathe. A blank line can do a lot for readability.

I personally still favor longer functions over a collection of many
one-use functions. But usually there's a certain flow to a function,
there's a topography: this is where we are now, this is where we'll
get to.

** =use-package=

*** Code after keywords

If the code after keywords serves more than a single goal, it should
be grouped and each group separated by an empty line. Ideally, these
groups should also have a comment if the purpose isn't immediately
clear.

This mostly applies to =:init= and =:config= blocks but can also make
sense for long =:custom= and =:bind= blocks.

Keyword =:demand= might skip the =t= if an =:after= immediately follows, in
that case they should also not be separated by a line.

*** Keyword Order

The order is:

1. Include
   1. =if=
   2. =wal-ways=
2. Load
   1. =ensure=
   2. =load-path= / =quelpa=
   3. =defer= or =demand=
   4. =after=
   5. =commands=
   6. =mode=
   7. =hook=
3. Configuration
   1. =init=
   2. =config=
   3. =custom=
4. Bindings
   1. =bind-keymap=
   2. =bind=
   3. =wal-bind=
   4. =general=
5. Delighting/Diminishing
   1. =delight=
   2. =diminish=

**** =:general= Keyword

The definer calls should be in the order of the ranks, default before
=sink=:

1. =general=
2. =colonel=
3. =major=
4. =captain=

*** Deferred Loading

There's no hard and fast rule there, but generally, only values =1=, =2=
and =3= should be used.

=1= is for semi-important stand-alone packages or extensions; =2= for
useful extensions, and =3= for nice-to-have extensions.

For example, the linters of language packages should use =1=, their test
packages =2=.

** Key Bindings

*** Prefixing

A letter may prefix an action or a nested keymap.

** Commits

Commits are linted using =commitlint=. To set this up, load file
=setup/wal-setup.el= and select =commit hooks=.

The rules are defined in =commitlint.config.js= and a description of all
rules can be found [[https://commitlint.js.org/#/reference-rules][here]].

** Order of Declarations

Each major section has a header block that contains the following in
the following order:

+ =declare-function= and empty =defvar=
+ =defgroup=
+ =defcustom=

The order of declarations in subsections is:

+ =defvar=
+ =defconst=
+ =defmacro=
+ =define-minor-mode=
+ =defun=
+ =defalias=
+ =use-package=
+ other function calls

** Variable Definition

The value of a variable should aim to be (or start) on the first line.

#+BEGIN_SRC emacs-lisp :tangle no
(defcustom some-variable "value"
  "Doc string."
  :type 'string
  :group 'some-group)


(defvar func-variable (expand-file-name "hello" "~")
  "Doc string.")

(defcustom some-list-variable '(a
                                list
                                of
                                items)
  "Doc string."
  :type '(repeat symbol)
  :group 'some-group)

(defconst sexp-variable (let ((var "hello"))
                          var)
  "Doc string.")
#+END_SRC

** Advice

Advising functions should follow a common template.

| Combinator     | Template                  |
|----------------+---------------------------|
| :after         | wal/then-<do>             |
| :around        | wal/with{out}-<do>        |
| :before        | wal/first-<do>            |
| :after-until   | wal/otherwise-<do>        |
| :before-while  | wal/ignore-if-<sth>       |
| :before-until  | wal/in-case-of-<sth>-<do> |
| :filter-args   | wal/pick-<sth>            |
| :filter-return | wal/apply-<sth>-to-<sth>  |
| :override      | wal/instead-<do>          |

Example for advising =:around=.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/with-big-vertico (fun &rest args)
  "Call FUN with ARGS but increase the `vertico-count'."
  (defvar vertico-count)
  (let ((vertico-count 20))

    (apply fun args)))

(advice-add
 'consult-ripgrep :around
 #'wal/with-big-vertico)
#+END_SRC
