#+TITLE: Windows
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }
#+TAGS: { usage : negligible(i) low(l) medium(u) high(h) }

Everything that has to do with windows.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-windows.el --- Windows. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide window packages.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t)
  (require 'wal-package nil t)
  (require 'wal-key-bindings nil t))

(require 'ring)
(require 'cl-macs)
(require 'subr-x)
#+END_SRC

* Packages

** ace-window                                                       :gnu:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Super-charged =other-window=.

#+begin_src emacs-lisp
(defmacro wal-aw (func)
  "Create a dispatch function wrapping FUNC."
  (let* ((sym (symbol-name func))
         (name (intern(format "wal-aw-%s" sym))))

    `(defun ,name (window)
       ,(format "Switch to WINDOW and then call `%s'." sym)
       (aw-switch-to-window window)
       (call-interactively ',func))))

(use-package ace-window
  :config
  (wal-aw consult-buffer)
  (wal-aw project-find-file)
  (wal-aw quit-window)
  (wal-aw partial-recall-switch-to-buffer)

  (setq aw-dispatch-alist
        `((?0 aw-delete-window "Delete window")
          (?1 delete-other-windows "Delete other windows")
          (?u wal-aw-consult-buffer "Consult buffer")
          (?h wal-aw-project-find-file "Find project file")
          (?q wal-aw-quit-window "Quit window")
          (?i wal-aw-partial-recall-switch-to-buffer "Recall moment")
          (?? aw-show-dispatch-help)))

  ;; Make sure we can repeat when only two windows are visible.
  (put 'ace-window 'repeat-map 'other-window-repeat-map)

  :custom
  (aw-keys '(?j ?k ?l ?\; ?h ?a ?s ?d ?f ?g))

  :wal-bind
  (("o" . ace-window)))
#+end_src

** windmove                                                     :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Start in =windmove-mode=. Allows moving to, swapping, deleting and pre-selecting the display of windows.

#+begin_src emacs-lisp
(use-package windmove
  :hook (emacs-startup . windmove-mode)

  :custom
  (windmove-default-keybindings (cons nil '(hyper)))
  (windmove-swap-states-default-keybindings (cons nil '(hyper shift)))
  (windmove-delete-default-keybindings (cons 'none '(hyper meta)))
  (windmove-display-default-keybindings (cons nil '(hyper control))))
#+end_src

** winner                                                    :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

Start in =winner-mode=, allowing =C-c <left/right>= to undo/redo changes to the window configuration.

We add a regular expression for commands we configured =vertico= to use a buffer for.

#+BEGIN_SRC emacs-lisp
(use-package winner
  :custom
  (winner-boring-buffers-regexp "\\*\\(Go to\\|Ripgrep\\).*")

  :hook (emacs-startup . winner-mode))
#+END_SRC

** tab-bar                                                     :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Start in =tab-bar-mode= but hide the tab bar itself. New tabs will show the =dashboard= buffer on creation. This config uses tabs only for workspace management powered by [[file:wal-bridge.org::*partial-recall][partial-recall]].

#+begin_src emacs-lisp
(use-package tab-bar
  :hook ((emacs-startup . tab-bar-mode))

  :custom
  (tab-bar-show nil)

  (tab-bar-tab-name-function #'tab-bar-tab-name-truncated)
  (tab-bar-new-tab-choice #'wal-dashboard-get-buffer)
  (tab-bar-new-tab-group nil)
  (tab-bar-tab-name-truncated-max 8)

  :wal-bind
  ("M-o" . tab-switch))
#+end_src

** transpose-frame                                        :nongnu:negligible:
:PROPERTIES:
:UNNUMBERED: t
:END:

Allow transposing frames (turning horizontal splits into vertical splits and vice-versa), flipping and flopping the windows in frames (so what is left is now right).

#+begin_src emacs-lisp
(defvar-keymap transpose-frame-map
  :doc "Keymap for `transpose-frame' commands."
  :repeat t
  "o" 'transpose-frame
  "T" 'flip-frame
  "t" 'flop-frame
  "r" 'rotate-frame
  "c" 'rotate-frame-clockwise
  "a" 'rotate-frame-anticlockwise)

(use-package transpose-frame
  :bind
  ("C-c t" . flop-frame)

  :bind-keymap
  ("C-c M-t" . transpose-frame-map))
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-windows)

;;; wal-windows.el ends here
#+END_SRC
