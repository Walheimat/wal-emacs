#+TITLE: Settings
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (expand-file-name "wal-settings.el" wal-emacs-config-build-path)

Set things up.

Confer also the eponymous [[file:wal-useful.org][functionality]] package if custom
functionality is used.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-settings.el --- Settings. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; The global settings.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t))

(declare-function scroll-bar-mode "scroll-bar.el")
(declare-function tool-bar-mode "tool-bar.el")
(declare-function wal-bytes-per-mb "wal-useful.el")
(declare-function wal-create-non-existent-directory "wal-useful.el")
(declare-function wal-increase-gc-cons-threshold "wal-useful.el")
(declare-function wal-insert "wal-useful.el")
(declare-function wal-modern-emacs-p "wal-useful.el")
(declare-function wal-persist-scratch "wal-key-bindings.el")
(declare-function wal-rehydrate-scratch "wal-key-bindings.el")
(declare-function wal-then-add-delete-trailing-whitespace-hook "wal-useful.el")
(declare-function wdb-faraway "wal-useful.el")

(defvar debugger-bury-or-kill)
(defvar display-time-default-load-average)
(defvar display-time-format)
(defvar native-comp-async-report-warnings-errors)
(defvar package-native-compile)
(defvar recentf-filename-handlers)
(defvar recentf-max-saved-items)
(defvar savehist-additional-variables)
(defvar so-long-action)
(defvar use-package-always-defer)
(defvar use-package-always-ensure)
(defvar use-package-compute-statistics)
(defvar use-package-defaults)
(defvar wal-prelude-ensure)
(defvar xref-search-program)

(defgroup wal-settings nil
  "Change core settings."
  :group 'wal
  :tag "Settings")

;;;; Customization:

(defcustom wal-site-lisp-directory (expand-file-name "site-lisp" user-emacs-directory)
  "Directory of site Lisp packages.

Needs to be an existing directory."
  :type 'string
  :group 'wal-settings)

(defcustom wal-scratch-persist-file (expand-file-name ".wal-scratch-persist" user-emacs-directory)
  "The file to persist the *scratch* buffer's content in."
  :type 'string
  :group 'wal-settings)

(defcustom wal-prefer-tabs nil
  "Whether tabs are preferred for indentation."
  :type 'boolean
  :group 'wal-settings)

(defcustom wal-maximize-new-frames t
  "Whether to maximize new frames by default."
  :type 'boolean
  :group 'wal-settings)

(defcustom wal-ack-warnings nil
  "Acknowledge all warnings."
  :type 'boolean
  :group 'wal-settings)
#+END_SRC

* Start-Up

Customize start-up.

#+BEGIN_SRC emacs-lisp
;; Maximize frame.
(setq frame-resize-pixelwise t)
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(when wal-maximize-new-frames
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))

;; No splash.
(setq inhibit-startup-message t)

;; Accept redefinitions.
(setq ad-redefinition-action 'accept)

;; Warn Mac/Windows users.
(unless (or (eq system-type 'gnu/linux) wal-ack-warnings)
  (warn "\
     Warning: Config only tested on Linux. The configuration may
     not work correctly on your system.

     Set `wal-ack-warnings' to t to ignore this warning."))
#+END_SRC

* Packages

Add MELPA to the package archives. Most (if not all) packages will be
installed from there.

#+BEGIN_SRC emacs-lisp
;; Always defer, maybe ensure.
(setq use-package-always-defer t)

(when (or wal-flag-ensure (bound-and-true-p wal-prelude-ensure))
  (message "Ensuring packages")
  (setq use-package-always-ensure t))

(when wal-flag-doctor
  (message "Computing package statistics")
  (setq use-package-compute-statistics t)

  (declare-function use-package-report "ext:use-package.el")

  (add-hook 'after-init-hook #'use-package-report))
#+END_SRC

* Directories

Prompt to ask directories if a file can't be found.

#+BEGIN_SRC emacs-lisp
(add-to-list 'find-file-not-found-functions #'wal-create-non-existent-directory)
#+END_SRC

** Site-Lisp

Add all sub-directories of the site lisp directory to load path (and
custom theme load path). I put non-MELPA packages here. You can also
put additional initialization into a =default.el= here.

#+BEGIN_SRC emacs-lisp
(when (and wal-site-lisp-directory
           (file-exists-p wal-site-lisp-directory))
  (let ((root (list wal-site-lisp-directory))
        (subdirs (directory-files wal-site-lisp-directory t "\\w+")))

    (dolist (project (append root subdirs))
      (when (file-directory-p project)
        (add-to-list 'load-path project)
        (add-to-list 'custom-theme-load-path project)))))
#+END_SRC

* Saving and Backups

Don't clutter up workspaces.

#+BEGIN_SRC emacs-lisp
;; Store backups in backups folder and back up by copying.
(setq backup-directory-alist
      `(("." . ,(expand-file-name (concat user-emacs-directory "backups"))))
      backup-by-copying t)

;; Store autosaves in temp folder.
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; We don't want this to mess with git.
(setq create-lockfiles nil)
#+END_SRC

* Reasonable Values

Make things shorter and snappier. These settings don't belong to
packages.

#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (wal-bytes-per-mb 1)
      echo-keystrokes 0.2

      ;; Undo limits.
      undo-limit (wal-bytes-per-mb 1)
      undo-strong-limit (wal-bytes-per-mb 1.5)
      undo-outer-limit (wal-bytes-per-mb 150)

      ;; Mouse.
      mouse-yank-at-point t

      ;; Native compilation.
      package-native-compile t
      native-comp-async-report-warnings-errors 'silent

      ;; Time.
      display-time-format " %H:%M"
      display-time-default-load-average nil
      save-interprogram-paste-before-kill t

      ;; Mark ring (halve it).
      mark-ring-max 8
      global-mark-ring-max 8

      ;; Search.
      isearch-lazy-count t
      isearch-allow-motion t
      isearch-allow-scroll t
      search-whitespace-regexp ".*?"

      ;; Parentheses.
      show-paren-delay 0.1
      show-paren-context-when-offscreen t ; New in Emacs 29.

      ;; Editing.
      backward-delete-char-untabify-method 'hungry

      ;; Recent files.
      ;; Otherwise source `consult--source-project-recent-file' won't work.
      recentf-filename-handlers nil
      recentf-max-saved-items 100

      ;; History.
      savehist-additional-variables '(kill-ring)

      ;; Autosaves.
      auto-save-timeout 10
      auto-save-interval 100

      ;; Buffers and windows.
      switch-to-buffer-in-dedicated-window 'prompt

      ;; Definitions.
      xref-search-program (if (executable-find "rg") 'ripgrep 'grep))

(setq-default tab-width 4
			  indent-tabs-mode wal-prefer-tabs)
#+END_SRC

* Variables

#+begin_src emacs-lisp
(put 'find-sibling-rules 'safe-local-variable #'consp)
#+end_src

* Global Modes

Any mode that should be on/off no matter what.

#+BEGIN_SRC emacs-lisp
;; A bunch of useful modes.
(show-paren-mode 1)
(global-auto-revert-mode 1)
(save-place-mode 1)
(delete-selection-mode 1)
(column-number-mode 1)
(global-so-long-mode 1)
(savehist-mode 1)
(recentf-mode 1)
(repeat-mode 1)

;; No need for bars.
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; Emacs 29.
(when (wal-modern-emacs-p 29)
  (pixel-scroll-precision-mode 1))
#+END_SRC

* Editing

Advise to maybe add hook to delete trailing whitespace.

#+BEGIN_SRC emacs-lisp
(advice-add
 'hack-local-variables :after
 #'wal-then-add-delete-trailing-whitespace-hook)
#+END_SRC

* Garbage Collection

Increase the =gc-cons-threshold= after start-up.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook #'wal-increase-gc-cons-threshold)
#+END_SRC

* Scratch Buffer

Let's keep the scratch contents.

#+BEGIN_SRC emacs-lisp
;; Empty scratch message.
(setq initial-scratch-message "")

(add-hook 'emacs-startup-hook #'wal-rehydrate-scratch)
(add-hook 'kill-emacs-hook #'wal-persist-scratch)
#+END_SRC

* Minimize Annoyances

Make never leaving Emacs a priority.

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil
      disabled-command-function nil
      debugger-bury-or-kill 'kill
      use-short-answers t
      so-long-action 'so-long-minor-mode)
#+END_SRC

* Buffer Display

#+BEGIN_SRC emacs-lisp
(wdb-faraway "^\\*wal-async\\*")
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-settings)

;;; wal-settings.el ends here
#+END_SRC

* Footnotes

[fn:1] Sometimes you have to play using other people's rules. You can run
=add-dir-local-variable= to do so.
