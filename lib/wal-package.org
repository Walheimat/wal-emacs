#+TITLE: Packages
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-package.el --- External packages -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Set up installing external packages.

;;; Code:

(eval-when-compile
  (require 'cl-extra)
  (require 'wal-useful nil t))

(declare-function package-built-in-p "package.el")
(declare-function package-read-all-archive-contents "package.el")
(declare-function package--user-selected-p "package.el")
(declare-function wal-prefix-user-key "wal-useful.el")

(defgroup wal-package nil
  "Change settings for external packages."
  :group 'wal
  :tag "Settings")

(defcustom wal-minimal nil
  "Whether to use a minimal configuration."
  :type 'boolean
  :group 'wal-package)
#+END_SRC

* Packages

Before =use-package= macro can be used to configure other packages it
needs to be installed.

#+BEGIN_SRC emacs-lisp
(defconst wal-package--missed-built-in
  '(abbrev
    dired
    elisp-mode
    follow-mode
    lisp-mode
    nxml-mode
    ob
    org-agenda
    org-capture
    org-clock
    org-duration
    org-habit
    org-keys
    org-refile
    org-src
    register
    text-mode)
  "Missed built-in packages.

This is a list of packages that `package-built-in-p' erroneously
considers external.")

(defun wal-package-installed-p (package)
  "Check if PACKAGE is installed."
  (not (null (or (package-installed-p package)
                 (memq package wal-package--missed-built-in)))))

(defun wal-package-built-in-p (package)
  "Check if PACKAGE is built-in."
  (not (null (or (package-built-in-p package)
                 (memq package wal-package--missed-built-in)))))

(defconst wal-core-packages '(use-package
                              delight
                              general)
  "Packages to install before using `use-package'.
Such as package `use-package'.")

(defconst wal-core-vc-packages '((whale-line . (:url "https://github.com/Walheimat/whale-line.git"))
                                 (partial-recall . (:url "https://github.com/Walheimat/partial-recall.git"))
                                 (harpoon . (:url "https://github.com/Walheimat/harpoon.git"))
                                 (junk . (:url "https://github.com/Walheimat/junk.git"))
                                 (bydi . (:url "https://github.com/Walheimat/bydi.git"))
                                 (parallel . (:url "https://github.com/Walheimat/parallel.git"))
                                 (ship-mate . (:url "https://github.com/Walheimat/ship-mate.git")))
  "Packages to install before using `use-package'.

These packages are installed with `package-vc-install'.")

(wal-on-boot package
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; Try to install. On fail refresh and install again.
  (let ((missing (seq-filter
                  (lambda (it) (not (package-installed-p it)))
                  wal-core-packages)))

    (condition-case nil
        (mapc 'package-install missing)
      (error
       (package-refresh-contents)
       (mapc 'package-install missing))))

  (when (fboundp 'package-vc-install)
    (let ((missing (seq-filter
                    (lambda (it) (not (package-installed-p (car it))))
                    wal-core-vc-packages)))

      (condition-case err
          (progn
            (mapc 'package-vc-install missing)

            (add-hook
             'after-init-hook
             (lambda ()
               (package--update-selected-packages (mapcar #'car missing) nil))))
        (error
         (message "Failed to install VC package: %s" (error-message-string err))))))

  (eval-when-compile
    (require 'use-package nil t))

  (wal-insert 'use-package-keywords :bind-keymap* :wal-bind)
  (wal-insert 'use-package-keywords :wal-bind :wal-bind-keymap)
  (wal-insert 'use-package-keywords :hook :fhook)
  (wal-insert 'use-package-keywords :hook :sinker)

  (wal-insert 'use-package-keywords :pin :wal-ways)
  (add-to-list 'use-package-defaults '(:wal-ways nil t))

  (wal-capture-flag doctor
    "Will set up `use-package' to collect statistics.")

  (wal-capture-flag mini
    "Will only consider packages that are part of the minimal configuration.")

  (wal-capture-flag ensure
    "Will set up `use-package' to ensure packages."))
#+END_SRC

** use-package Extensions

*** use-package/:wal-bind

We'll add keyword =:wal-bind= to =use-package= in order to create bindings
prefixed by =wal-prefix-user-key=.

#+BEGIN_SRC emacs-lisp
(defun wal-use-package-normalize-binder (name keyword args)
  "Normalize NAME, KEYWORD, ARGS.

This normalizer is a copy of the normalizer for `:bind'. There
are two differences:

1. It prefixes the key strings with `wal-prefix-user-key'.
2. On recursion it calls this normalizer."
  (declare-function use-package-recognize-function "ext:use-package.el")
  (declare-function use-package-error "ext:use-package.el")

  (let ((arg args)
        args*)
    (while arg
      (let ((x (car arg)))
        (cond
         ((and (consp x)
               (or (stringp (car x))
                   (vectorp (car x)))
               (or (use-package-recognize-function (cdr x) t #'stringp)))
          ;; This is where we deviate from the `:bind' normalizer.
          (setq args* (nconc args* (list (cons (wal-prefix-user-key (car x)) (cdr x)))))
          (setq arg (cdr arg)))
         ((or (and (eq x :map) (symbolp (cadr arg)))
              (and (eq x :prefix) (stringp (cadr arg)))
              (and (eq x :prefix-map) (symbolp (cadr arg)))
              (and (eq x :prefix-docstring) (stringp (cadr arg)))
              (eq x :filter)
              (and (eq x :menu-name) (stringp (cadr arg)))
              (and (eq x :package) (symbolp (cadr arg))))
          (setq args* (nconc args* (list x (cadr arg))))
          (setq arg (cddr arg)))
         ((listp x)
          (setq args*
                (nconc args* (use-package-normalize/:wal-bind name keyword x)))
          (setq arg (cdr arg)))
         (t
          (use-package-error
           (concat (symbol-name name)
                   " wants arguments acceptable to the `bind-keys' macro,"
                   " or a list of such values"))))))
    args*))

(defalias 'use-package-normalize/:wal-bind 'wal-use-package-normalize-binder)
(defalias 'use-package-normalize/:wal-bind-keymap 'wal-use-package-normalize-binder)

;; We can use the same handler as `:bind' and `:bind-keymap'.
(defalias 'use-package-handler/:wal-bind 'use-package-handler/:bind)
(defalias 'use-package-handler/:wal-bind-keymap 'use-package-handler/:bind-keymap)

;; Make sure that functions are autoloaded.
(defalias 'use-package-autoloads/:wal-bind 'use-package-autoloads-mode)
#+END_SRC

*** use-package/:wal-ways

Certain packages do not belong to a minimal setup, these are tagged
with =:wal-ways nil=.

#+BEGIN_SRC emacs-lisp
(defalias 'use-package-normalize/:wal-ways 'use-package-normalize-predicate)

(defun use-package-handler/:wal-ways (name _keyword pred rest state)
  "Only expand minimally.

If `wal-minimal' is t, package NAME is only expanded if it is
either built-in or sets PRED to t.

The STATE is updated as well before parsing REST if we want to
use the result further down the line."
  (declare-function use-package-process-keywords "ext:use-package.el")
  (declare-function use-package-plist-maybe-put "ext:use-package.el")

  (let* ((do-expand (or pred
                        (not (or wal-minimal wal-flag-mini))
                        (wal-package-built-in-p name)))

         (body (use-package-process-keywords
                 name
                 rest
                 (use-package-plist-maybe-put state :wal-ways do-expand))))

    `((when ,do-expand ,@body))))
#+END_SRC

*** use-package/:sinker

Add hook but at the end.

#+begin_src emacs-lisp
(defalias 'use-package-normalize/:sinker 'use-package-normalize/:hook)

(defun use-package-handler/:sinker (name _keyword args rest state)
  "Add hooks at the end.

See other handler's explanation of NAME, ARGS, REST and STATE."
  (declare-function use-package-concat "ext:use-package.el")
  (declare-function use-package-hook-handler-normalize-mode-symbols "ext:use-package.el")
  (declare-function use-package-normalize-commands "ext:use-package.el")
  (declare-function use-package-process-keywords "ext:use-package.el")
  (defvar use-package-hook-name-suffix)

  (use-package-concat
   (use-package-process-keywords name rest state)
   (cl-mapcan
    #'(lambda (def)
        (let ((syms (car def))
              (fun (cdr def)))
          (when fun
            (mapcar
             #'(lambda (sym)
                 `(add-hook
                   (quote ,(intern
                            (concat (symbol-name sym)
                                    use-package-hook-name-suffix)))
                   (function ,fun)
                   t))
             (use-package-hook-handler-normalize-mode-symbols syms)))))
    (use-package-normalize-commands args))))
#+end_src

*** use-package/:fhook

Allow adding hooks to =-functions=.

#+begin_src emacs-lisp
(defalias 'use-package-normalize/:fhook 'use-package-normalize/:hook)

(defun use-package-handler/:fhook (name keyword args rest state)
  "Add hook to variables using `*-functions' pattern.

See other handler's explanation of NAME, KEYWORD, ARGS, REST and
STATE."
  (defvar use-package-hook-name-suffix)
  (declare-function use-package-handler/:hook "ext:use-package.el")

  (let ((use-package-hook-name-suffix "-functions"))

    (use-package-handler/:hook name keyword args rest state)))
#+end_src

*** Conditional :hook and :ensure

Don't add hooks if the package isn't installed. Don't ensure built-in
and expansion pack packages.

#+BEGIN_SRC emacs-lisp
(defun wal-ignore-if-not-installed (package &rest _r)
  "Don't handle hooks if PACKAGE isn't installed."
  (or (wal-package-installed-p package)
      (package-built-in-p package)
      (package--user-selected-p package)))

(defun wal-use-package-ensure-elpa (name args _state &optional _no_refresh)
  "Do the same as `use-package-ensure-elpa' but ignore built-in packages.

NAME is the package name, ARGS the ensure keywords."
  (declare-function use-package-as-symbol "ext:use-package.el")
  (declare-function use-package-pin-package "ext:use-package.el")

  (defvar package-archive-contents)

  (dolist (ensure args)
    (let ((package
           (or (and (eq ensure t) (use-package-as-symbol name))
               ensure)))
      (when package
        (require 'package)
        (when (consp package)
          (use-package-pin-package (car package) (cdr package))
          (setq package (car package)))
        (unless (wal-package-installed-p package)
          (condition-case-unless-debug err
              (progn
                (when (assoc package (bound-and-true-p
                                      package-pinned-packages))
                  (package-read-all-archive-contents))
                (if (assoc package package-archive-contents)
                    (package-install package)
                  (package-refresh-contents)
                  (when (assoc package (bound-and-true-p
                                        package-pinned-packages))
                    (package-read-all-archive-contents))
                  (package-install package))
                t)
            (error
             (display-warning 'use-package
                              (format "Failed to install %s: %s"
                                      name (error-message-string err))
                              :error))))))))

(wal-on-boot external
  (setq use-package-ensure-function #'wal-use-package-ensure-elpa)
  (advice-add
   'use-package-handler/:hook :before-while
   #'wal-ignore-if-not-installed))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-package)

;;; wal-package.el ends here
#+END_SRC
