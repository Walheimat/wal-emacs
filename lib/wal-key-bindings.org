#+TITLE: Key Bindings
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

I use many[fn:1] custom keybindings.

* Overview

** Control

There are some non-standard control sequences. Anywhere:

+ =C->= expands region
+ =C-.= marks "next like this" using =multiple-cursors=.

User-reserved combinations are used for (mostly built-in) commands
and command maps:

+ =C-c a= for =org-agenda=
+ =C-c b= for =eww=
+ =C-c c= for =org-capture= (=C-c v= captures project tasks)
+ =C-c e= for =eshell=
+ =C-c f= for =flymake=
+ =C-c g= for =smerge=
+ =C-c i= for =compile=
+ =C-c j= is bound to =outline-minor-mode-map= (if mode is enabled)
+ =C-c l= to toggle =display-line-numbers-mode=
+ =C-c m= for =bookmark=
+ =C-c n= to take notes for an =org-agenda= item
+ =C-c o= quits windows showing usually hidden buffers
+ =C-c p= for a heavy =pulse=
+ =C-c q= to do a =quick-calc= (inserted if called with =C-u=)
+ =C-c r= to =recompile=
+ =C-c s= for =flyspell=
+ =C-c x= opens a scratch buffer (can be called with numeric argument).

** Meta

+ =M-o= to switch to the =other-window= (=C-M-o= switch to other
  buffer).

** Hyper

I [[Rebinding Hyper][rebound]] my =<CAPS>= (caps-lock) key to =Hyper_L= to use the hyper
bindings below. Therefore, all following keys should be right hand
keys.

Most hyper[fn:2] bindings are quick-access actions:

+ =H-6= jumps to register, =H-M-6= stores point in register, =H-C-M-6=
  stores window configuration to register (7, 8 and 9 are quick
  registers, store with =M=)
+ =H-\= calls =wal-lsp-dwim= in LSP buffers
+ =H-<equal>= switches to project using =consult=
+ =H-h= finds file in =project= (=H-M-h= find in other window)
+ =H-i= calls =consult= to find a place using =imenu= or =outline= or
  headings (=H-M-i= goes to line with).
+ =H-j=
  + jumps to word in line (=H-M-j= jumps to char with timer)
  + during =vertico= and =corfu= completion, it triggers the respective
    quick completion
  + when used with =M= it goes to char with a timer
+ =H-k= acts on the current point with =embark= (immediately with
  =H-M-k=)
+ =H-l= jumps to line with =avy= (beginning of line if called with
  =C-u=, =H-M-l= jumps to word)
+ =H-m= for =magit-status= (=H-M-m= runs =ma-magit=)
+ =H-<mouse3>= adds another =multiple-cursor= at point
+ =H-n= searches project with =rg= (=C-0= searches using regex,
  =H-M-n= does =rg-menu=)
+ =H-o= switches tabs (=M-H-o= renames the current tab)
+ =H-p= to rerun the last =ship-mate= command (=H-M-p= binds
  =ship-mate-command-map=)
+ =H-<SPC>= clocks in (or out if called with prefix; prefix =0= clocks
  in without continuation)
+ =H-,= switches to buffer using =consult= (=H-M-,= opens custom
  transient)
+ =H-{up,down,left,right}= moves with =windmove= (swap with shift, delete
  with meta, and prep display with control)
+ =H-u= switches buffers in =partial-recall= memory (=H-M-u= calls the
  command map)
+ =H-y= finds project file in current directory (=H-M-y= finds
  directory, =H-C-M-y= switches to parent project).

There are also two =cape= completions:

+ =H-M-.= completes =dabbrev= and
+ =H-M-/= completes file.

*** Rebinding Hyper

**** XServer

Assuming you use Xorg Display server, create an =.Xmodmap= file in your
home folder containing the following lines.

#+BEGIN_SRC conf :tangle no
! Assign Hyper_L to Caps_Lock
keycode 66 = Hyper_L
! Remove caps lock
remove lock = Caps_Lock
! Set hyper to mod3 from mod4
remove mod4 = Hyper_L
add mod3 = Hyper_L
#+END_SRC

Add a script (also in your home folder) containing the following
command and call it during start-up.

#+begin_src shell :tangle no
[[ -f ~/.Xmodmap ]] && xmodmap ~/.Xmodmap
#+end_src

This assumes that =Hyper_L= was assigned to modifier =Mod4= that's already
used by =Super_L= and modifier =Mod3= is an empty group.

**** Unsafe Alternative

A much riskier[fn:1] way, provided the recipe above doesn't work,
would be to edit your =/usr/share/X11/xkb/symbols/pc= file like so:

#+BEGIN_SRC :tangle no
...
// key <CAPS> {    [ Caps_Lock     ]   };
key <CAPS> {    [ Hyper_L       ]   };
...
// modifier_map Lock   { Caps_Lock };
modifier_map Mod3   { Hyper_L, Hyper_R };
...
// modifier_map Mod4   { <HYPR> };
modifier_map Mod3   { <HYPR> };
#+END_SRC

** Leader Keys

There are seven leader keys (three of them =general= leaders), each
serving its unique purpose by prefixing (groups of) actions by common
context or scope.

The =general= leader keys have so-called sinks for additional commands.

*** Administrator

Leader key =administrator= is responsible for Emacs actions like loading
a theme, finding a library, quitting.

*** Whaler

Leader key =whaler= is responsible for this configuration.

*** Roamer

Leader key =roamer= invokes a dispatch for =org-roam=.

*** Ambassador

Leader key =ambassador= deals with the (buffer-, project-)local context.

If the respective buffer-local =minor-mode= is active, the following
commands and command maps are bound:

+ =0= for =dashboard-refresh-buffer=
+ =8= for =kubernetes=
+ =b= for =dap-mode=
+ =d= for =docker=
+ =f= for =flycheck=
+ =@= for =mu4e=
+ =h= for =diff-hl=
+ =l= for =lsp-mode=
+ =v= for =verb=.

*** Major

Leader key =major= invokes a dispatch if the underlying major-mode has
it defined.

*** Editor

Leader key =editor= provides a layer of useful editing actions.

They are:

+ =c= to copy a line
+ =d= to duplicate lines (in Emacs 29)
+ =j= to go to next spelling error with =jinx=
+ =k= for to start/stop =kmacro= recording
+ =q= to "spill" a paragraph
+ =m= to move a line
+ =h= to kill-save whole buffer
+ =s= to insert pair with =surround=
+ =.= to mark all "like this"
+ =w= to kill-save a line
+ =x= to kill a line.

The sink for =editor= provides alternative version of these calls.

They are:

+ =c= to copy a region
+ =j= to fix spelling with =jinx=
+ =m= to move a region
+ =s= to kill between pair with =surround=
+ =.= to mark all ends in a region
+ =w= to kill a region
+ =x= to delete a region.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-key-bindings.el --- Key bindings. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Key bindings package.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t)
  (require 'wal-package nil t))

(defvar transient-current-command)

(declare-function general-define-key "ext:general")
(declare-function transient-args "ext:transient.el")
(declare-function transient-arg-value "ext:transient.el")

(defgroup wal-key-bindings nil
  "Change key bindings settings."
  :group 'wal
  :tag "Key bindings")

;;;; Customization:

(defcustom wal-hyper-mock (kbd "C-c w")
  "The key sequence to use to mock hyper modifier."
  :type 'key-sequence
  :group 'wal-key-bindings)

(defcustom wal-leaders '((";" . editor)
                         ("." . major)
                         ("/" . ambassador)
                         ("'" . roamer)
                         ("[" . whaler)
                         ("]" . administrator))
  "Alist mapping prefix keys to leaders."
  :type '(alist :key-type string :value-type symbol)
  :group 'wal-key-bindings)
#+END_SRC

* Leaders

#+BEGIN_SRC emacs-lisp
(defsubst wal-prefix-user-key (user-key)
  "Prefix USER-KEY."
  (let ((prefix "H-"))

    (concat prefix user-key)))

(defun wal-key-by-leader (leader)
  "Get the key for LEADER."
  (car-safe (rassoc leader wal-leaders)))

(cl-defun wal-key-combo-for-leader (leader &key key in-sink translate)
  "Get the key combination for LEADER.

If KEY is non-nil, append it. If IN-SINK is non-nil, infix leader
key. If TRANSLATE is non-nil, convert using `kbd'."
  (when-let* ((leader-key (wal-key-by-leader leader))
              (prefix (wal-prefix-user-key leader-key))
              (combo (if key
                         (if in-sink
                             (concat prefix " " leader-key " " key)
                           (concat prefix " " key))
                       prefix)))
    (if translate
        (kbd combo)
      combo)))
#+END_SRC

* Packages

** general                                                            :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Allows defining custom prefixes. This adds macros to create so-called
sinks for leader keys, an additional layer using the same prefix key,
as well as to mirror certain commands for the [[*Editor][editor]] leader key.

#+BEGIN_SRC emacs-lisp
(defvar wal-general-leaders '(editor ambassador administrator)
  "Leaders that a `general' definer will be created for.")

(cl-defmacro wal-create-leader-sink (name &key definer prefix)
  "Macro to create a leader sink `NAME-sink'.

NAME is the name of the macro. DEFINER is the definer to create
the sink for and PREFIX is its prefix."
  (declare (indent defun))

  (let* ((defname (symbol-name definer))
         (suffix (substring prefix -1))
         (wk (upcase (concat defname "!"))))

    (progn
      (general-define-key :prefix prefix suffix `(:ignore t :wk ,wk))

      `(defmacro ,name (&rest args)
         `(, ',definer ,@,`(mapcar (lambda (it)
                                     (if (stringp it)
                                         (concat ,suffix it)
                                       it))
                                   args))))))

(cl-defmacro editors (key fun mfun &rest args)
  "Bind FUN to KEY, MFUN in the sink.

All ARGS are passed to both definers."
  (declare (indent defun))

  `(progn
    (editor ,@args ,key ,fun)
    (editor-sink ,@args ,key ,mfun)))

(defun wal-general-create-definer (leader)
  "Create a definer for LEADER with a sink."
  (let* ((key (wal-key-combo-for-leader leader))
         (sink (intern (format "%s-sink" leader)))
         (name (symbol-name leader)))

    ;; Queue up `which-key' replacements.
    (eval-after-load 'which-key `(which-key-add-key-based-replacements ,key ,name))

    ;; Create the normal definer.
    (eval `(general-create-definer ,leader :prefix ,key))

    ;; Also create the sink.
    (eval `(wal-create-leader-sink ,sink :definer ,leader :prefix ,key))))

(defun major? ()
  "Show message when major is not locally bound."
  (interactive)

  (let ((key (propertize (wal-key-combo-for-leader 'major) 'face 'success))
        (mode (propertize (symbol-name major-mode) 'face 'success)))

    (message "Major (%s) has no binding in %s" key mode)))

(use-package general
  :demand t
  :wal-ways t

  :config
  (seq-do #'wal-general-create-definer wal-general-leaders)

  :functions (general-define-key))
#+END_SRC

** transient                                                        :builtin:
:PROPERTIES:
:UNNUMBERED: t
:END:

Another nice way of grouping keys.

Some transients are bound directly, others are =wal-univ= variants (see
above).

#+BEGIN_SRC emacs-lisp
(defun wal-transient-grab (arg)
  "Grab argument ARG from current command."
  (transient-arg-value
   (format "--%s=" arg)
   (transient-args transient-current-command)))

(defun wal-transient-command-or-major ()
  "Show only major if command includes it."
  (if (string-match "major" mode-line-buffer-identification)
      "major"
    mode-line-buffer-identification))

(defun wal-with-delayed-transient-popup (fun &rest args)
  "Delay the transient FUN before calling it with ARGS."
  (defvar transient-show-popup)
  (let ((transient-show-popup 0.8))

    (apply fun args)))

(use-package transient
  :demand t

  :custom
  (transient-hide-during-minibuffer-read t)
  (transient-mode-line-format '("%e"
                                mode-line-front-space
                                (:eval (wal-transient-command-or-major)))))
#+END_SRC

** which-key                                                            :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Show the next possible key presses towards a command.

#+BEGIN_SRC emacs-lisp
(cl-defmacro that-key (description &key key condition user-key leader)
  "Add DESCRIPTION for KEY after loading `which-key'.

If CONDITION is non-nil, surround the replacement with it.
USER-KEY and LEADER can be used to prefix the key."
  (let ((key (cond
              (user-key
               (wal-prefix-user-key user-key))
              (leader
               (apply 'wal-key-combo-for-leader leader))
              (key key)
              (t ""))))
    `(with-eval-after-load 'which-key
       (declare-function which-key-add-key-based-replacements "ext:which-key.el")

       ,(if condition
            `(when ,condition
               (which-key-add-key-based-replacements ,key ,description))
          `(which-key-add-key-based-replacements ,key ,description)))))

(use-package which-key
  :defer 2
  :wal-ways t

  :config
  (which-key-mode 1)

  :custom
  (which-key-lighter " wk?")

  (which-key-idle-delay 0.8)
  (which-key-idle-secondary-delay 0.2)

  (which-key-sort-uppercase-first nil)
  (which-key-sort-order #'which-key-prefix-then-key-order)

  (which-key-show-docstrings t)
  (which-key-preserve-window-configuration t)
  (which-key-show-early-on-C-h t)

  :functions (which-key-mode))
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
(with-no-warnings
  (with-eval-after-load 'general
    ;; Additional `general' bindings.
    (administrator
      "f" '(:ignore t :wk "find")
      "fc" 'wal-find-custom-file
      "fi" 'wal-find-init
      "fl" 'find-library

      "l" '(:ignore t :wk "list")
      "lp" 'list-processes
      "lt" 'list-timers

      "s" '(:ignore t :wk "set")
      "st" 'wal-set-transparency
      "sc" 'wal-set-cursor-type

      "p" '(:ignore t :wk "package")
      "pf" 'package-refresh-contents
      "pi" 'package-install
      "pl" 'list-packages
      "pr" 'package-reinstall
      "pd" 'package-delete

      "t" '(:ignore t :wk "profiler")
      "ts" 'profiler-start
      "to" 'profiler-stop
      "tr" 'profiler-report

      "h" '(:ignore t :wk "help")
      "hw" 'woman)

    (global-set-key (kbd (wal-key-combo-for-leader 'whaler)) #'whaler)

    (global-set-key (kbd (wal-key-combo-for-leader 'major)) #'major?)

    (when (wal-modern-emacs-p 29)
      (editor "d" 'duplicate-dwim))

    (editor "h" 'wal-kill-ring-save-whole-buffer)

    (editor "q" 'wal-spill-paragraph)

    (general-define-key
     :prefix (wal-prefix-user-key "-")
     :prefix-map 'wal-triple-minus-map
     :wk-full-keys nil
     "b" 'wal-kill-some-file-buffers
     "d" 'wal-l
     "f" 'wal-fundamental-mode
     "1" 'wal-force-delete-other-windows)

    (general-define-key
     :prefix (wal-prefix-user-key "0")
     :prefix-map 'wal-zero-in-map
     :wk-full-keys nil
     "f" 'wal-find-fish-config
     "h" 'wal-dired-from-home
     "s" 'find-sibling-file)

    (that-key "triple-minus" :user-key "-")
    (that-key "zero-in" :user-key "0"))

  (global-set-key [remap kill-line] #'wal-kwim)
  (global-set-key [remap move-beginning-of-line] #'wal-mwim-beginning)
  (global-set-key (kbd "C-c x") #'wal-scratch-buffer)
  (global-set-key (kbd "C-c b") #'eww)
  (global-set-key (kbd "C-c l") #'display-line-numbers-mode)
  (global-set-key (kbd "C-c o") #'wal-supernova)
  (global-set-key (kbd "C-M-i") #'completion-at-point)

  ;; Alternate binding for C-c x @ h.
  (define-key function-key-map wal-hyper-mock #'event-apply-hyper-modifier)

  ;; Make accessing `other-window' and associated commands easier.
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-M-o") 'wal-switch-to-other-buffer)

  (with-eval-after-load 'window
    (when (boundp 'other-window-repeat-map)
      (define-key other-window-repeat-map "0" 'delete-window)
      (define-key other-window-repeat-map "1" 'delete-other-windows)
      (define-key other-window-repeat-map (kbd "C-k") 'wal-force-delete-other-windows)
      (define-key other-window-repeat-map "5" 'other-frame))))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-key-bindings)

;;; wal-key-bindings.el ends here
#+END_SRC

* Footnotes

[fn:1] To get a full overview you'll have to call
=describe-personal-keybindings= and =general-describe-keybindings=.

[fn:2] Note that =C-c w= is bound to apply the hyper modifier as well; so
if you don't have access to the key, you can always use that instead.
