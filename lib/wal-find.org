#+TITLE: Finding Things
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

I mostly search.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-find.el --- Finding things. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide packages to find things.

;;; Code:

(eval-when-compile
  (require 'wal-key-bindings nil t)
  (require 'wal-bridge nil t))

(declare-function dogears-list "ext:dogears.el")
(declare-function rg-project-root "ext:rg.el")
(declare-function rg-read-files "ext:rg.el")
(declare-function rg-rerun-toggle-flag "ext:rg-result.el")
(declare-function rg-run "ext:rg.el")
(declare-function rg-read-pattern "ext:rg.el")
(declare-function rg-search-flags "ext:rg.el")

(defvar dogears-list-buffer)
(defvar rg-cur-search)
#+END_SRC

* Packages

** rg                                                                 :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

You can get the =ripgrep= binary from [[https://github.com/BurntSushi/ripgrep][here]]. This package provides a
nice =transient= to run =ripgrep= with the desired options, searching
for files within projects literally and using regular expressions.

#+BEGIN_SRC emacs-lisp
(defun wal-rg-rerun-toggle-hidden ()
  "Re-run last search with toggled '--hidden' flag."
  (interactive)

  (rg-rerun-toggle-flag "--hidden"))

(defun wal-rg-rerun-toggle-context (&optional arg)
  "Re-run last search with toggled '--context' flag.

Optional ARG will be interpreted as a numeric prefix and passed
to the flag. If a flag is already present, it is removed."
  (interactive "P")

  (when-let* ((flags (rg-search-flags rg-cur-search))
              (matcher (lambda (it) (string-prefix-p "--context" it)))
              (flag (or (seq-find matcher flags)
                        (and arg
                             (format "--context=%d" (prefix-numeric-value arg))))))

    (rg-rerun-toggle-flag flag)))

(defun wal-rg--run (&optional pattern literal)
  "Query for PATTERN for FILES in project.

If LITERAL is t, search literally."
  (defvar rg-command-line-flags-function)

  (let ((pattern (or pattern (rg-read-pattern literal)))
        (files (rg-read-files))
        (dir (rg-project-root buffer-file-name))
        (flags (funcall rg-command-line-flags-function 'nil)))

    (rg-run pattern files dir literal nil flags)))

(defun wal-rg-project-literal ()
  "Search in project literally."
  (interactive)

  (wal-rg--run nil t))

(defvar wal-rg-hl-todo--restricted-prefix " ")
(defvar wal-rg-hl-todo--restricted-suffix ": ")

(defun wal-rg-project-todos (&optional all)
  "Find `hl-todo' keywords.

If optional ALL is t, be less restrictive about finding
them (accepting no leading whitespace and no trailing colon)."
  (interactive "P")

  (defvar hl-todo-keyword-faces)

  (let ((pattern (concat
                  (unless all wal-rg-hl-todo--restricted-prefix)
                  "("
                  (mapconcat #'car hl-todo-keyword-faces "|")
                  ")"
                  (unless all wal-rg-hl-todo--restricted-suffix))))

    (wal-rg--run pattern)))

(use-package rg
  :wal-ways t

  :commands (rg-project rg-menu rg-read-pattern)

  :init
  (parallel wal-rg-project-literal rg-project)

  :config
  (wdb-faraway "\\*rg\\*\\'")

  ;; Allow searching for TODOs in a project.
  (with-eval-after-load 'hl-todo
    (transient-append-suffix 'rg-menu '(2 0 -1)
      '("x" "TODOs" wal-rg-project-todos)))

  :bind
  (:map rg-mode-map
   ("h" . wal-rg-rerun-toggle-hidden)
   ("a" . wal-rg-rerun-toggle-context)
   :map isearch-mode-map
   ("M-s n" . rg-isearch-current-file))

  :wal-bind
  (("n" . rg-project-literal||project)
   ("M-n" . rg-menu)))
#+END_SRC

** dumb-jump                                                          :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Look up definitions when no LSP is already doing it. Jumping is done
using =xref-find-definitions= (=M-.=).

#+BEGIN_SRC emacs-lisp
(defun wal-dumb-jump-go ()
  "Use `dumb-jump' to find definitions."
  (interactive)
  (defvar xref-backend-functions)

  (let ((xref-backend-functions '(dumb-jump-xref-activate)))

    (xref-find-definitions (thing-at-point 'symbol))))

(use-package dumb-jump
  :wal-ways t

  :fhook (xref-backend . dumb-jump-xref-activate)

  :custom
  (dumb-jump-force-searcher 'rg)
  (dumb-jump-selector 'completing-read)

  :wal-bind
  (("." . wal-dumb-jump-go))

  :functions (dumb-jump-xref-activate))
#+END_SRC

** gumshoe

Backtrack in a buffer.

This just binds the variant that backtracks within a buffer.

#+begin_src emacs-lisp
(use-package gumshoe
  :defer 3

  :config
  (global-gumshoe-mode 1)

  :custom
  (gumshoe-slot-schema '(time line))

  :bind
  (:map global-gumshoe-backtracking-mode-map
   ("n" . global-gumshoe-backtracking-mode-forward)
   ("p" . global-gumshoe-backtracking-mode-back))

  :general
  (ambassador "g" '(:ignore t :wk "gumshoe")
              "gb" 'gumshoe-buf-backtrack
              "gp" 'gumshoe-peruse-in-buffer))
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-find)

;;; wal-find.el ends here
#+END_SRC
