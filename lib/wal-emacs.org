#+TITLE: Emacs
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }
#+TAGS: { usage : negligible(i) low(l) medium(u) high(h) }

Everything that has to do with Emacs-y stuff.

This is a combination of configurations for built-in packages some external ones.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-emacs.el --- Emacs. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide Emacs settings/configurations.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t)
  (require 'wal-key-bindings nil t)
  (require 'wal-bridge nil t))

(declare-function pdf-tools-install "ext:pdf-tools.el")
(declare-function wdb-faraway "wal-useful.el")
(declare-function wdb-nearby "wal-useful.el")

(wal-on-boot emacs
  (wdb-faraway "\\*Messages\\*")
  (wdb-faraway 'help-mode)
  (wdb-faraway 'shortdoc-mode)
  (wdb-faraway 'debug-mode))
#+END_SRC

* Packages

#+begin_src emacs-lisp
(junk-expand emacs
  "Let's keep it in Emacs."
  :extras (pdf-tools))
#+end_src

** abbrev                                                  :builtin:indirect:
:PROPERTIES:
:UNNUMBERED: t
:END:

Automatic quick expansion.

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :custom
  (save-abbrevs t)

  :delight " abb")
#+END_SRC

** async                                                            :gnu:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Execute IO actions asynchronously. This is mainly for moving files in Dired.

#+BEGIN_SRC emacs-lisp
(use-package async
  :defer 2
  :after dired

  :config
  (dired-async-mode 1)

  :functions (dired-async-mode))
#+END_SRC

** bookmark                                                     :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Leave a bookmark why don't you. Binds the keymap and sets up annotations.

#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :init
  (that-key "bookmark" :key "C-c b")

  :config
  (wdb-nearby "\\*Bookmark Annotation\\*" :side 'left :no-other t)

  :custom
  (bookmark-use-annotations t)
  (bookmark-menu-confirm-deletion t)
  (bookmark-fringe-mark nil)

  :bind-keymap
  (("C-c b" . bookmark-map))

  :bind
  (:map bookmark-map
   ("b" . bookmark-set)
   ("l" . bookmark-bmenu-list)
   ("L" . bookmark-load)))
#+END_SRC

** calc                                                  :builtin:negligible:
:PROPERTIES:
:UNNUMBERED: t
:END:

Quick calculations.

#+BEGIN_SRC emacs-lisp
(use-package calc
  :bind
  ("C-c q" . quick-calc))
#+END_SRC

** compile                                                     :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Show compilations in a pop-up and scroll output.

#+begin_src emacs-lisp
(use-package compile
  :hook
  (compilation-filter . ansi-color-compilation-filter)

  :config
  (wdb-faraway "\\*compilation")

  :custom
  (compilation-scroll-output t)
  (compilation-max-output-line-length nil)

  :bind
  (("C-c r" . compile)
   ("C-c M-r" . recompile)))
#+END_SRC

** diff-mode                                                 :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

Effing diffing.

#+BEGIN_SRC emacs-lisp
(use-package diff-mode
  :bind
  ;; Remove `diff-goto-source'.
  (:map diff-mode-shared-map
   ("o" . nil)))
#+END_SRC

** doc-view                                                     :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(defvar-local wal-doc-view-page-offset 0)
(put 'wal-doc-view-page-offset 'safe-local-variable #'integerp)

(defun wal-with-page-offset (goto page)
  "Go to PAGE with an offset.

GOTO is the advised function

This function only applies the offset if `this-command' is
`doc-view-goto-page' to avoid offsetting going to a previous or
next page."
  (let ((offset (if (eq 'doc-view-goto-page this-command)
                    (+ page wal-doc-view-page-offset)
                  page)))

    (funcall-interactively goto offset)))

(use-package doc-view
  :config
  (advice-add
   'doc-view-goto-page :around
   #'wal-with-page-offset))
#+end_src

** eldoc                                                        :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Contextual information. Package =lsp-mode= use =eldoc= extensively.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :custom
  (eldoc-idle-delay 0.2)
  (eldoc-echo-area-prefer-doc-buffer 'maybe)
  (eldoc-echo-area-display-truncation-message nil)

  :delight " eld")
#+END_SRC

** helpful                                                       :melpa:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Let's try to be even more =helpful=. This provides alternate version of various =describe= commands to provide more information.

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :wal-ways t

  :config
  (wdb-faraway 'helpful-mode)

  :custom
  (helpful-max-buffers 3)

  :bind
  (([remap describe-command] . helpful-command)
   ([remap describe-function] . helpful-function)
   ([remap describe-key] . helpful-key)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-symbol] . helpful-symbol)

   :map help-map
   ("M" . helpful-macro)
   ("C-x" . helpful-kill-buffers)

   :map helpful-mode-map
   ("k" . kill-buffer-and-window))

  :defines (helpful-mode-map))
#+END_SRC

** hl-line                                                   :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

Highlighting the current line.

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :hook
  ((tablist-minor-mode
    tabulated-list-mode
    dired-mode)
   . hl-line-mode))
#+END_SRC

** kmacro                                                       :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Some people need macros, okay?

#+BEGIN_SRC emacs-lisp
(defun wal-kmacro (arg)
  "Toggle kmacro recording with ARG."
  (interactive "P")

  (cond
   (defining-kbd-macro (kmacro-end-macro arg))
   (t (kmacro-start-macro arg))))

(use-package kmacro
  :general
  (editor "k" 'wal-kmacro))
#+END_SRC

** outline                                                      :builtin:low:

Navigate outline.

#+begin_src emacs-lisp
(use-package outline
  :hook ((text-mode prog-mode harpoon-prog-like) . outline-minor-mode)

  :delight
  (outline-minor-mode " out")

  :config
  (that-key "outline" :key "C-c d")

  :custom
  (outline-minor-mode-prefix (kbd "C-c d")))
#+end_src

** pulse                                                 :builtin:negligible:
:PROPERTIES:
:UNNUMBERED: t
:END:

Highlight lines.

#+BEGIN_SRC emacs-lisp
(defun wal-lighthouse ()
  "Do a heavy `pulse-momentary-highlight-one-line'.

This just means increasing duration, delay, size and brightness."
  (interactive)

  (defvar pulse-iterations)
  (let ((pulse-iterations 30))

    (pulse-momentary-highlight-one-line (point) 'cursor)))

(use-package pulse
  :bind
  ("C-c z" . wal-lighthouse))
#+END_SRC

** register                                                     :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

No offender.

#+BEGIN_SRC emacs-lisp
(defun wal-clear-registers ()
  "Clear all registers."
  (interactive)

  (setq register-alist nil))

(defun wal-point-to-register (register &optional arg)
  "Store current location of point in REGISTER.

With prefix argument ARG, store current window configuration.

This is otherwise a copy of `point-to-register'."
  (interactive (list (register-read-with-preview
                      (if current-prefix-arg
                          "Window configuration to register: "
                        "Point to register: "))
                     current-prefix-arg))

  (add-hook 'kill-buffer-hook 'register-swap-out nil t)

  (set-register
   register
   (if arg
       (list (current-window-configuration) (point-marker))
	 (point-marker))))

(use-package register
  :config
  ;; Make sure that jumping to a marker attempts to select a window
  ;; already displaying the buffer first.
  (cl-defmethod register-val-jump-to :before ((val marker) arg)
    (when-let* ((buffer (marker-buffer val))
                (windows (window-list-1))
                (live (seq-find (lambda (it) (eq (window-buffer it) buffer))
                                windows)))

      (select-window live)))
  :custom
  (register-preview-delay 0.8)

  :general
  (adjunct "r" 'wal-clear-registers)

  :wal-bind
  (("y" . jump-to-register)
   ("M-y" . wal-point-to-register)))
#+END_SRC

** repeat                                                      :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package repeat
  :custom
  (repeat-exit-key (kbd "q"))
  (repeat-exit-timeout 5))
#+end_src

** shell                                                       :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

I'd like to kill shells without a process quickly.

#+BEGIN_SRC emacs-lisp
(use-package shell
  :general
  (general-define-key
   :keymaps '(shell-mode-map comint-mode-map)
   :predicate '(wal-dead-shell-p)
   "k" 'kill-buffer-and-window))
#+END_SRC

** text-mode                                                    :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

No double spaces in sentences.

#+BEGIN_SRC emacs-lisp
(use-package text-mode
  :init
  (harpoon text-mode
    :flat t
    :functions
    (wal-account-for-commit-buffer visual-line-mode))

  :custom
  (sentence-end-double-space nil)
  (text-mode-ispell-word-completion nil))

(defun wal-account-for-commit-buffer ()
  "Account for the buffer being the commit buffer."
  (when (string-match "COMMIT_EDITMSG" (buffer-name))
    (electric-pair-local-mode)))
#+END_SRC

** pdf-tools                                                      :melpa:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

This provides better PDF editing capabilities than the built-in =doc-view-mode=.

#+begin_src emacs-lisp
(use-package pdf-tools
  :defer 3
  :after doc-view

  :config
  (pdf-tools-install))
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-emacs)

;;; wal-emacs.el ends here
#+END_SRC
