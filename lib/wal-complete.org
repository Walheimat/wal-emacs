#+TITLE: Completion
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal--tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

Complete commands and code.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-complete.el --- Completion. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide Emacs completion packages.

;;; Code:

(eval-when-compile
  (require 'savehist)
  (require 'wal-key-bindings nil t))

(declare-function consult-line "ext:consult.el")
(declare-function consult-org-agenda "ext:consult.el")
(declare-function junk--stringify "ext:junk.el")
(declare-function junk--parts "ext:junk.el")
(declare-function org-clock-in "ext:org-clock.el")
(declare-function org-clocking-buffer "ext:org-clock.el")
(declare-function org-up-heading-safe "ext:org.el")
(declare-function wal-append "wal-useful.el")
(declare-function wal-org-clock-in-from-now "wal-org.el")
(declare-function wal-project--buffer-root "wal-workspace.el")
(declare-function wal-univ-p "wal-useful.el")

(defvar consult-register--narrow)
(defvar junk-expansion-packs)
(defvar project--list)
(defvar savehist-additional-variables)
(defvar vertico-map)
(defvar wal-active-theme)

;;; Customization:

(defgroup wal-complete nil
  "Change completion settings."
  :group 'wal
  :tag "Completion")
#+END_SRC

* Inline Completion

** corfu                                                                :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Light-weight inline completion. The custom function is taken from the
wiki to make sure that =corfu= is enabled in the minibuffer when it
makes sense.

#+BEGIN_SRC emacs-lisp
(defun wal-corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point (list (current-local-map)))
    (corfu-mode 1)))

(use-package corfu
  :hook
  (((org-mode prog-mode harpoon-prog-like eshell-mode inferior-python-mode) . corfu-mode)
   (minibuffer-setup . wal-corfu-enable-in-minibuffer))

  :custom
  (corfu-cycle t))
#+END_SRC

** corfu-quick                                                          :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Jump to a completion candidate with a single letter.

#+BEGIN_SRC emacs-lisp
(use-package corfu-quick
  :ensure nil

  :demand t
  :after corfu

  :wal-bind
  (:map corfu-map
   ("j" . corfu-quick-complete))

  :defines (corfu-map))
#+END_SRC

** corfu-history                                                        :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Save the completion history.

#+BEGIN_SRC emacs-lisp
(use-package corfu-history
  :ensure nil

  :demand t
  :after corfu

  :config
  (add-to-list 'savehist-additional-variables 'corfu-history)
  (corfu-history-mode)

  :custom
  (corfu-history-length 200)

  :defines (corfu-map)
  :functions (corfu-history-mode))
#+END_SRC

** corfu-popupinfo                                                      :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Show docs or location during selection.

Key bindings:

+ =M-t= to toggle
+ =M-g= for location
+ =M-h= for documentation

Scrolling works like for =other-window=.

#+BEGIN_SRC emacs-lisp
(use-package corfu-popupinfo
  :after corfu
  :demand t
  :ensure nil

  :config
  (corfu-popupinfo-mode)

  :functions (corfu-popupinfo-mode))
#+END_SRC

** corfu-terminal                                                    :nongnu:

Allows using =corfu= in a terminal.

#+begin_src emacs-lisp
(use-package corfu-terminal)
#+end_src

** cape                                                                 :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Provides additional completion function as well as functionality to
jerry-rig =company= backends to work with =corfu=.

#+begin_src emacs-lisp
(use-package cape
  :bind
  (("C-c h" . cape-history)
   ("C-c /" . cape-file)))
#+end_src

* Minibuffer Completion

** vertico                                                              :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Provide global option narrowing using the =vertico= family of
products. The setup is mostly as per the official docs. This just sets
up =vertico-multiform-mode= to make certain completion tasks
unobtrusive.

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :defer 1
  :wal-ways t

  :hook (minibuffer-setup . cursor-intangible-mode)

  :config
  ;; Set up minibuffer.
  (setq read-extended-command-predicate #'command-completion-default-include-p
        minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))

  (vertico-mode)
  (vertico-multiform-mode)

  :custom
  (vertico-cycle t)
  (vertico-resize t)

  (vertico-multiform-categories '((consult-grep buffer)
                                  (consult-location buffer)
                                  (org-heading buffer)
                                  (consult-outline buffer)
                                  (imenu buffer)))

  (vertico-multiform-commands '((tab-switch flat)
                                (partial-recall-switch-to-buffer flat)))

  :functions (vertico-mode vertico-multiform-mode))
#+END_SRC

** vertico-directory                                                    :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Make sure navigating directories during completion is a breeze. This
makes sure that we don't go into directories when jumping in Dired.

#+BEGIN_SRC emacs-lisp
(defvar-local wal-command nil
  "Command that started completion session.")

(defun wal-record-this-command ()
  "Record the command which opened the minibuffer."
  (setq-local wal-command this-command))

(defun wal-with-dired-goto-file-ignored (fun &rest args)
  "Advise FUN using ARGS to exit if we came from `dired-goto-file'."
  (unless (and (eq (car args) 'category)
               (eq wal-command 'dired-goto-file))
    (apply fun args)))

(use-package vertico-directory
  :ensure nil

  :demand t
  :after vertico

  :hook
  ((rfn-eshadow-update-overlay . vertico-directory-tidy)
   (minibuffer-setup . wal-record-this-command))

  :config
  ;; We don't want to enter directories when we go to file with Dired.
  (advice-add
   'vertico--metadata-get :around
   #'wal-with-dired-goto-file-ignored)

  :bind
  (:map vertico-map
   ("RET" . vertico-directory-enter)
   ("DEL" . vertico-directory-delete-char)
   ("M-DEL" . vertico-directory-delete-word)))
#+END_SRC

** vertico-quick                                                        :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Quickly jump to a candidate with a single letter.

#+BEGIN_SRC emacs-lisp
(use-package vertico-quick
  :ensure nil

  :demand t
  :after vertico

  :custom
  (vertico-quick1 "jkl;h")
  (vertico-quick2 "asdfg")

  :wal-bind
  (:map vertico-map
   ("j" . vertico-quick-exit)))
#+END_SRC

** orderless                                                            :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Fuzzy matching while completing. The =completion= settings are as per
official docs.

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :demand t
  :after vertico

  :config
  ;; Setup basic completion and category defaults/overrides.
  (setq completion-styles '(orderless partial-completion basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** marginalia                                                           :gnu:

Contextual information during completion, partial completion and
completion actions.

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :demand t
  :after vertico

  :config
  (marginalia-mode)

  :bind
  (:map minibuffer-local-map
   ("C-," . marginalia-cycle))

  :functions (marginalia-mode)
  :defines (marginalia-annotator-registry marginalia-command-categories))
#+END_SRC

** embark                                                               :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Act upon =thing-at-point=, be it in a buffer or minibuffer. Sets a few
more commands in various maps. The entry point command is created
using [[file:wal-bridge.org::*parallel][parallel]].

#+BEGIN_SRC emacs-lisp
(defun wal-browse-html-file (filename)
  "Browse FILENAME provided it's an HTML file."
  (when (not (string= (file-name-extension filename) "html"))
    (user-error "Can only browse HTML files"))

  (browse-url (expand-file-name filename)))

(use-package embark
  :init
  (parallel embark-act embark-dwim)

  :config
  ;; Search using region.
  (define-key embark-region-map
              (kbd "g")
              #'wal-duck-duck-go-region)

  (define-key embark-file-map
              (kbd "x")
              #'wal-browse-html-file)

  (define-key embark-buffer-map
              (kbd "t")
              #'wal-tab-bar-switch-to-buffer-tab)

  :custom
  (embark-mixed-indicator-delay 0.8)
  (embark-cycle-key "C-,")

  :wal-bind
  ("k" . embark-act||dwim))
#+END_SRC

** embark-consult                                                       :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Integration for =consult=.

#+BEGIN_SRC emacs-lisp
(use-package embark-consult
  :demand t
  :after (embark consult)

  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** consult                                                              :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Beautiful completion and narrowing within completion. This adds a new
source for projects while switching to differentiate open and closed
projects. Since =consult= provides many useful commands a transient
combining the most useful ones is bound to the eponymous leader key.

#+BEGIN_SRC emacs-lisp
(defun wal-consult-ripgrep-ignored (&optional dir initial)
  "Search for regexp with rg in DIR with INITIAL input.
Do not ignore hidden files."
  (interactive "P")

  (declare-function consult--grep "ext:consult.el")
  (declare-function consult--ripgrep-builder "ext:consult.el")

  (defvar consult-ripgrep-args)

  (let ((consult-ripgrep-args
         (concat (substring consult-ripgrep-args 0 -1) "--no-ignore .")))

    (consult--grep "Ripgrep (ignored)" #'consult--ripgrep-builder dir initial)))

(defun wal-consult-unregister ()
  "Remove KEY from the register."
  (interactive)

  (let ((key (with-no-warnings
               (consult--read
                (consult-register--candidates)
                :prompt "Unregister: "
                :category 'multi-category
                :group (consult--type-group consult-register--narrow)
                :narrow (consult--type-narrow consult-register--narrow)
                :sort nil
                :require-match t
                :history t
                :lookup #'consult--lookup-candidate))))

    (setq register-alist (assoc-delete-all key register-alist))))

(defun wal-consult-clock-in (&optional discontinue)
  "Clock into an Org agenda heading.

If DISCONTINUE is non-nil, clock in from now."
  (interactive "P")

  (save-window-excursion
    (consult-org-agenda)
    (if discontinue
        (wal-org-clock-in-from-now)
      (org-clock-in)))

  (with-current-buffer (org-clocking-buffer)
    (save-buffer)))

(defun wal-then-set-active-theme (theme)
  "Advise to set `wal-active-theme' to THEME."
  (setq wal-active-theme theme)

  (when current-prefix-arg
    (customize-save-variable 'wal-theme theme))

  (run-hooks 'wal-theme-hook))

(defvar consult--project-history nil)

(defvar consult--source-projects
  (list :name "Projects"
        :category 'project
        :history 'consult--project-history
        :action 'project-switch-project
        :items (lambda ()
                 (let ((open (consult--open-project-items))
                       (all (mapcar #'car project--list)))

                   (seq-filter (lambda (it) (not (member it open))) all)))))

(defun consult--open-project-items ()
  "Get the open projects."
  (cl-remove-duplicates
   (cl-loop for buffer being the buffers
            for project = (wal-project--buffer-root buffer)
            if project
            collect project)
   :test 'string=))

(defvar consult--source-open-projects
  (list :name "Open projects"
        :category 'project
        :hidden t
        :narrow ?o
        :history 'consult--project-history
        :action 'project-switch-project
        :items 'consult--open-project-items))

(defun wal-consult-project ()
  "Enhanced `project-switch-project' command."
  (interactive)

  (declare-function consult--multi "ext:consult.el")

  (consult--multi
   '(consult--source-open-projects consult--source-projects)
   :prompt "Select project: "
   :require-match t))

(defun wal-consult-outline ()
  "Call the appropriate `consult' method."
  (interactive)

  (if (derived-mode-p 'org-mode)
      (call-interactively 'consult-org-heading)
    (call-interactively 'consult-outline)))

(use-package consult
  :commands (consult--multi consult)

  :config
  ;; Integrate with `xref'.
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Customize sources.
  (consult-customize
   consult--source-recent-file
   consult--source-project-recent-file
   consult--source-project-recent-file-hidden
   consult--source-bookmark
   consult-recent-file
   :preview-key "C-."

   wal-consult-clock-in
   :prompt "Clock in: ")

  ;; Be sure to set the active theme after switching.
  (advice-add 'consult-theme :after #'wal-then-set-active-theme)

  (advice-add 'consult :around 'wal-with-delayed-transient-popup)

  (with-eval-after-load 'org-keys
    (wal-replace-in-alist
     'org-speed-commands
     '(("j" . consult-org-heading))))

  (transient-define-prefix consult ()
    "Run `consult' commands."
    [["Goto"
      ("b" "buffer" consult-buffer)
      ("SPC" "mark" consult-mark)
      ("g" "line" consult-goto-line)
      ("i" "imenu" consult-imenu)
      ("o" "outline" wal-consult-outline)
      ("p" "project" wal-consult-project)]

     ["Find"
      ("m" "bookmark" consult-bookmark)
      ("@" "global mark" consult-global-mark)
      ("f" "recent file" consult-recent-file)
      ("a" "agenda" consult-org-agenda)]

     ["Search"
      ("s" "line" consult-line)
      ("n" "grep" consult-ripgrep)
      ("l" "locate" consult-locate)]

     ["Register"
      ("r r" "register" consult-register)
      ("r l" "load" consult-register-load)
      ("r s" "store" consult-register-store)
      ("r u" "unregister" wal-consult-unregister)]

     ["Do"
      ("c" "clock in" wal-consult-clock-in)
      ("k" "call macro" consult-kmacro)
      ("t" "change theme" consult-theme)]]

    [["Modes"
      ("+" "major mode command" consult-mode-command)
      ("-" "toggle minor mode" consult-minor-mode-menu)]])

  :general
  (general-define-key
   (wal-key-combo-for-leader 'consult)
   'consult))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-complete)

;;; wal-complete.el ends here
#+END_SRC
