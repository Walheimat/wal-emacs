#+TITLE: LSP
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

Language servers are awesome. Thanks, Microsoft.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-lsp.el --- LSP. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide LSP packages.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t)
  (require 'wal-package nil t)
  (require 'wal-key-bindings nil t)
  (require 'wal-bridge nil t))

(declare-function ambassador "wal-key-bindings.el")
(declare-function cape-company-to-capf "ext:cape.el")
(declare-function corfu-mode "ext:corfu.el")
(declare-function dap--completing-read "ext:dap-mode.el")
(declare-function dap--json-encode "ext:dap-mode.el")
(declare-function dap-register-debug-template "ext:dap-mode.el")
(declare-function lsp-deferred "ext:lsp-mode.el")
(declare-function harpoon-slow-lsp-p "ext:harpoon.el")
(declare-function wal-append "wal-useful.el")
(declare-function wal-dap "wal-lsp.el")
(declare-function wal-key-combo-for-leader "wal-key-bindings.el")
(declare-function wal-tempel-setup-capf "wal-edit.el")

(defvar dap-debug-template-configurations)

(defgroup wal-lsp nil
  "Change settings for LSP packages."
  :group 'wal
  :tag "LSP")
#+END_SRC

* Packages

#+begin_src emacs-lisp
(junk-expand lsp
  "Enhance LSP with even more linting."
  :extras (lsp-sonarlint))
#+end_src

** eglot                                                            :builtin:

The built-in, light-weight LSP package. I only use it for Godot
currently.

#+begin_src emacs-lisp
(use-package eglot
  :custom
  (eglot-autoshutdown t))
#+end_src

** lsp-mode                                                           :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

=lsp-mode= is the fancy version. You'll have to install some language
servers yourself[fn:1].

#+BEGIN_SRC emacs-lisp
(defun wal-lsp-completion ()
  "Make sure completion works well with `corfu' and `orderless'."
  (unless (harpoon-slow-lsp-p major-mode)
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          completion-styles)))

(defun wal-first-prevent-adding-other-projects (&rest _args)
  "Prevent adding workspace roots from other projects."
  (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht))))

(defun wal-lsp-dwim ()
  "Make the LSP do what I mean.

The action depends on the current position, active region and the
`thing-at-point'."
  (interactive)

  (cond
   ((eq 1 (point))
    (call-interactively 'lsp-organize-imports))

   ((use-region-p)
    (call-interactively 'lsp-format-region))

   ((thing-at-point 'symbol t)

    (let ((bounds (bounds-of-thing-at-point 'symbol)))

      (cond
       ((eq (car-safe bounds) (point))
        (call-interactively 'lsp-rename))
       (t
        (call-interactively 'lsp-execute-code-action)))))

   ((thing-at-point 'whitespace t)

    (call-interactively 'lsp-format-buffer))

   (t
    (user-error "No action registered for thing at point"))))

(use-package lsp-mode
  :hook (lsp-completion-mode . wal-lsp-completion)

  :config
  ;; Integrate with other packages.
  (require 'avy nil t)

  ;; Don't keep track of multiple projects.
  (advice-add 'lsp :before #'wal-first-prevent-adding-other-projects)

  ;; JavaScript.
  (with-eval-after-load 'js
    (transient-append-suffix 'js-mode-major '(0 0 -1)
      '("r" "rename file" lsp-javascript-rename-file)))

  ;; Command map.
  (setq lsp-keymap-prefix (wal-key-combo-for-leader 'ambassador :key "l"))
  (lsp-enable-which-key-integration t)
  (ambassador :keymaps 'lsp-mode-map "l" '(:keymap lsp-command-map :wk "LSP"))

  :custom
  ;; Simplify visuals.
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-signature-render-documentation nil)
  (lsp-signature-function 'lsp-signature-posframe)
  (lsp-signature-auto-activate '(:on-server-request))

  ;; Play nice with `corfu'.
  (lsp-completion-provider :none)
  (lsp-enable-snippet nil)

  ;; Workspace.
  (lsp-keep-workspace-alive nil)

  ;; Individual servers.
  (lsp-pylsp-plugins-jedi-use-pyenv-environment t)
  (lsp-clients-typescript-log-verbosity "off")
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-xml-format-split-attributes t)
  (lsp-xml-format-space-before-empty-close-tag nil)
  (lsp-xml-format-split-attributes-indent-size 1)

  :wal-bind
  (:map lsp-mode-map
   ("\\" . wal-lsp-dwim))

  :delight
  (lsp-mode " lsp")
  (lsp-lens-mode " lns")

  :functions (lsp-deferred lsp-enable-which-key-integration)
  :defines (lsp-keymap-prefix))
#+END_SRC

** lsp-ui                                                             :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't clutter things up too much.

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after lsp-mode

  :custom
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse nil) ;; Messes with help echos.

  ;; No sideline stuff.
  (lsp-ui-sideline-enable nil)

  ;; Allow for more text.
  (lsp-ui-doc-text-scale-level -2))
#+END_SRC

** dap-mode                                                           :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Debugging using VSCode's DAP (in =lsp-mode=). Have a look at the
[[Debug Templates][templates]].

#+BEGIN_SRC emacs-lisp
(defvar wal-dap-before nil)
(defvar wal-debugging nil)

(defun wal-dap-terminated (_session)
  "Restore window configuration."
  (when wal-dap-before
    (set-window-configuration wal-dap-before))

  (setq wal-dap-before nil
        wal-debugging nil))

(defun wal-dap-session-created (&rest _r)
  "Save window configuration and delete other windows."
  (setq wal-dap-before (current-window-configuration)
        wal-debugging t)

  (delete-other-windows))

(defun wal-instead-grab-directly ()
  "Grab like `company' would."
  (if (looking-at "\\>")
      (buffer-substring (point) (save-excursion (skip-syntax-backward "w")
                                                (point)))
    (unless (and (char-after) (eq (char-syntax (char-after)) ?w))
      "")))

(defun wal-dap-adapt-company-backend ()
  "Adapt company backend using `cape'."
  (setq-local completion-at-point-functions
              (mapcar #'cape-company-to-capf '(dap-ui-repl-company)))

  (corfu-mode))

(use-package dap-mode
  :after lsp-mode

  :hook ((dap-session-created . wal-dap-session-created)
         (dap-ui-repl-mode . wal-dap-adapt-company-backend))
  :sinker ((dap-terminated . wal-dap-terminated))

  :config
  (dap-auto-configure-mode)

  (wal-replace-in-alist
   'dap-ui-buffer-configurations
   `((,dap-ui--repl-buffer . ((side . bottom) (slot . 1) (window-height . 5)))))

  (advice-add
   'dap-ui-repl-company-prefix :override
   #'wal-instead-grab-directly)

  (defvar-keymap dap-repeat-map
    :doc "Keymap to repeat `dap-mode' commands."
    :repeat '(:enter (dap-next dap-continue dap-step-in dap-step-out)
              :exit (dap-disconnect dap-eval))
    "n" 'dap-next
    "c" 'dap-continue
    "i" 'dap-step-in
    "o" 'dap-step-out
    "e" 'dap-eval
    "d" 'dap-disconnect)

  :custom
  (dap-auto-show-output nil)
  (dap-auto-configure-features '(locals expressions))

  (dap-ui-repl-prompt (propertize "$ " 'field 'output))

  (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)

  ;; Decrease size of `lsp-treemacs' windows.
  (treemacs-text-scale -1)

  :general
  (ambassador :keymaps 'lsp-mode-map
    "b" '(:ignore t :wk "dap")

    "bb" 'dap-debug
    "br" 'dap-ui-repl

    "ba" 'dap-ui-expressions-add
    "b." 'dap-eval-thing-at-point

    "bt" 'dap-breakpoint-toggle
    "b?" 'dap-breakpoint-condition
    "bp" 'dap-ui-breakpoints-list

    ;; Repeated.
    "bn" 'dap-next
    "bc" 'dap-continue
    "bi" 'dap-step-in
    "bo" 'dap-step-out
    "be" 'dap-eval
    "bd" 'dap-disconnect)

  :delight " dap")
#+END_SRC

** consult-lsp                                                        :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Jump to symbols with =consult=.

#+begin_src emacs-lisp
(use-package consult-lsp
  :demand t
  :after (consult lsp-mode)

  :config
  (transient-append-suffix 'consult '(0 0 -1)
    '("y" "symbol" consult-lsp-file-symbols
      :inapt-if-not (lambda () (bound-and-true-p lsp-mode)))))
#+end_src

** lsp-sonarlint                                                      :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Some more linting.

#+begin_src emacs-lisp
(use-package lsp-sonarlint
  :config
  (require 'lsp-sonarlint-java)

  :custom
  (lsp-sonarlint-java-enabled t)

  :demand t
  :after lsp-mode)
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-lsp)

;;; wal-lsp.el ends here
#+END_SRC

* Debug Templates

Put these templates in a file in your project root, and evaluate them
there using =C-x C-e=.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal-dap-create-launch-json-from-template ()
  "Create and write a VSCode launch configuration using a template."
  (interactive)
  (wal-try dap-mode
    (let* ((args (-> (dap--completing-read "Select template: "
                                           dap-debug-template-configurations
                                           'cl-first nil t)
                     cl-rest
                     copy-tree))

           (serialized (dap--json-encode args))
           (file-args (find-file-read-args "Find file (deleting other windows): "
                                           (confirm-nonexistent-file-or-buffer)))
           (filename (car file-args)))
      (with-temp-buffer
        (insert serialized)
        (json-pretty-print-buffer)
        (write-region (buffer-string) nil filename)))))
#+END_SRC

** Node.js

This for attaching to a remote host (Docker container) using =nodemon=.

For TypeScript compile your =src= with =--sourceMap= or set =sourceMap= to
=true= in your =tsconfig.json=.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((use-source-maps t)          ; Turn off if not needed.
           (build-directory "build")    ; Set to `nil' if this isn't transpiled JavaScript.
           (remote-root "/usr/src/app") ; If this is running remotely.
           (local-root (if build-directory
                           (concat (file-name-directory buffer-file-name) build-directory)
                         (file-name-directory buffer-file-name))))

      (dap-register-debug-template
       "attach::node"
       (list :type "node"
             :request "attach"
             :sourceMaps use-source-maps
             :remoteRoot remote-root
             :localRoot local-root
             :port 9229)))))
#+END_SRC

** Python

Attach to running process.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal-dap-register-debugpy-template (name remote-root)
  "Create template for debugpy.

Prompts user for NAME of the template and the REMOTE-ROOT."
  (interactive "sName of the template: \nsRemote root: ")
  (wal-try dap-mode
    (let ((mapping `(:localRoot "${workspaceFolder}" :remoteRoot ,remote-root)))

      (dap-register-debug-template
       name
       (list :type "python"
             :request "attach"
             :connect (list :host "localhost" :port 5678)
             :pathMappings (vector mapping))))))
#+END_SRC

** Flutter

Debugging without sound null safety.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (dap-register-debug-template
   "flutter::unsound"
   (list
    :type "flutter"
    :program "lib/main.dart"
    :args '("--no-sound-null-safety"))))
#+END_SRC

** Laravel

Make sure you expose port =9003=.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (let ((mapping '(:/var/www/html "${workspaceFolder}")))

    (dap-register-debug-template
     "laravel::launch"
     (list
      :type "php"
      :request "launch"
      :port 9003
      :pathMappings mapping))))
#+END_SRC

*** XDebug Config

Put the following into your =php.ini=.

#+BEGIN_SRC conf :tangle no
[XDebug]
xdebug.start_with_request = yes
xdebug.show_local_vars = on
xdebug.discover_client_host = true
xdebug.client_host = 0.0.0.0
xdebug.client_port = 9003
#+END_SRC

* Footnotes

[fn:1] All languages listed [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]].
