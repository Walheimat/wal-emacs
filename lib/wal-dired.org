#+TITLE: Dired
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (expand-file-name "wal-dired.el" wal-emacs-config-build-path)

Run =dired= with =C-x d=.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-dired.el --- Dired. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide Dired packages.

;;; Code:

(eval-when-compile
  (require 'wal-func (expand-file-name "wal-func.el" ".")))

(declare-function dired-read-dir-and-switches "ext:dired.el")
(declare-function consult--buffer-query "ext:consult.el")
(declare-function consult--buffer-state "ext:consult.el")
(declare-function wal-insert-after "wal-func.el")
#+END_SRC

* Packages

** dired
:PROPERTIES:
:UNNUMBERED: t
:END:

The mother of all buffers. You don't need no tree views.

*** Utility

#+BEGIN_SRC emacs-lisp
(defun wal-dired-from-home (dirname &optional switches)
  "Find DIRNAME local to HOME directory.
Uses the same optional SWITCHES."
  (interactive
    (let ((default-directory (expand-file-name "~/")))

      (dired-read-dir-and-switches "")))

  (pop-to-buffer-same-window (dired-noselect dirname switches)))

(defun wal-image-dired ()
  "Run `image-dired' in the `default-directory'."
  (interactive)

  (image-dired (expand-file-name default-directory)))

(defun wal-dired-buffer-p (buffer)
  "Check if buffer BUFFER is a Dired buffer."
  (with-current-buffer buffer
    (derived-mode-p 'dired-mode)))

(defun wal-consult-dired-buffer--query ()
  "Get Dired buffer names."
  (consult--buffer-query
   :sort 'visibility
   :as #'buffer-name
   :predicate #'wal-dired-buffer-p))
#+END_SRC

*** Configuration

#+BEGIN_SRC emacs-lisp
(use-package dired
  :init
  (harpoon dired-mode
    :major t)

  :config
  ;; We aren't scared of finding alternate files.
  (put 'dired-find-alternate-file 'disabled nil)

  (wal-transient-define-major dired-mode ()
    "Access Dired commands."
    [["Utility"
      ("q" "query replace" dired-do-query-replace-regexp)
      ("t" "create empty file" dired-create-empty-file)]
     ["Other"
      ("v" "show images" wal-image-dired)]])

  (with-eval-after-load 'consult
    (defvar wal-consult--source-dired-buffer
      (list :name "Dired Buffer"
            :narrow ?d
            :category 'buffer
            :state #'consult--buffer-state
            :history 'buffer-name-history
            :face 'font-lock-keyword-face
            :items #'wal-consult-dired-buffer--query))

    (wal-insert-after
     'consult-buffer-sources
     'consult--source-buffer
     'wal-consult--source-dired-buffer))

  :custom
  (dired-listing-switches "-lah --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-kill-when-opening-new-dired-buffer t)

  :bind
  (:map dired-mode-map
   ;; Replaces duplicate `dired-do-rename-regexp' binding.
   ("% r" . dired-do-query-replace-regexp)))
#+END_SRC

** dired-filter
:PROPERTIES:
:UNNUMBERED: t
:END:

Hit =/= to filter in dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :defer 1
  :after dired

  :delight " drf")
#+END_SRC

** diredfl
:PROPERTIES:
:UNNUMBERED: t
:END:

Highlighting in dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :wal-ways nil

  :defer 1
  :after dired

  :config
  (diredfl-global-mode))
#+END_SRC

** wdired
:PROPERTIES:
:UNNUMBERED: t
:END:

Did you know you can edit =dired= buffers using =C-x C-q=?

#+BEGIN_SRC emacs-lisp
(use-package wdired
  :custom
  (wdired-allow-to-change-permissions t)

  :bind
  (:map wdired-mode-map
   ("C-c C-k" . wdired-abort-changes)))
#+END_SRC

** all-the-icons-dired
:PROPERTIES:
:UNNUMBERED: t
:END:

Show file icons.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :wal-ways nil

  :after all-the-icons

  :hook (dired-mode . all-the-icons-dired-mode)

  :custom
  (all-the-icons-dired-monochrome nil))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-dired)

;;; wal-dired.el ends here
#+END_SRC
