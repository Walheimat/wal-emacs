#+TITLE: Movement
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal--tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

Moving around should be fun.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-movement.el --- Movement. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide movement packages.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t)
  (require 'wal-key-bindings nil t))

(declare-function avy--line "ext:avy.el")
(declare-function avy-goto-end-of-line "ext:avy.el")
(declare-function avy-goto-line "ext:avy.el")
(declare-function avy-goto-word-0 "ext:avy.el")
(declare-function avy-jump "ext:avy.el")
(declare-function org-at-heading-p "ext:org.el")
(declare-function wal-univ-p "wal-useful.el")
#+END_SRC

* Packages

** avy                                                                  :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Line-(as well as word- and character-)based movement and actions.

Configured to go to =beginnning-of-line= for Org buffers (because of
=org-speed-commands=). The scope (current line, current window, all
windows) of jumping to words can be extended using =C-u=. The dispatch
is extended with functionality to mark the section between point and
jump target.

#+BEGIN_SRC emacs-lisp
(defun wal-avy-goto-word (&optional scope)
  "Jump to a word.

SCOPE will consume `universal-argument' to determine whether to
jump to a word in the buffer or anywhere."
  (interactive "P")

  (if scope
      (let ((flip (or (and (listp scope) (> 5 (prefix-numeric-value scope)))
                      (and (numberp scope) (> 2 scope)))))

        (setq current-prefix-arg nil)
        (avy-goto-word-0 flip))

    (eval (macroexpand
           '(avy-with avy-goto-word-0
              (avy-jump avy-goto-word-0-regexp
                        :beg (line-beginning-position)
                        :end (line-end-position)
                        :window-flip t))))))

(defun wal-avy-goto-line (&optional beginning)
  "Go to line or BEGINNING of line."
  (interactive "P")

  (if beginning
      (progn
        (avy-goto-line)
        (beginning-of-line-text))
    (avy-goto-end-of-line)))

(defun avy-action-zip-to-char (pt)
  "Zip (just mark) from current point up to PT."
  (set-mark (point))
  (goto-char pt))

(defun wal-then-goto-beginning-for-org-headings (&rest _args)
  "Advise `avy-goto-end-of-line' to go to beginning for `org' headings.

When called with `universal-argument', this also goes to the
beginning."
  (when (or (wal-univ-p)
            (and (eq major-mode 'org-mode) (org-at-heading-p)))
    (goto-char (line-beginning-position))))

(use-package avy
  :commands (avy-with)

  :config
  ;; Extend the dispatch with a way to delete up to a char.
  (add-to-list 'avy-dispatch-alist '(?q . avy-action-zip-to-char))

  ;; Make sure we go to the start of the line for org headings.
  (advice-add
   'avy-goto-end-of-line :after
   #'wal-then-goto-beginning-for-org-headings)

  :custom
  (avy-background t)
  (avy-timeout-seconds 0.4)

  :wal-bind
  (("l" . wal-avy-goto-line)
   ("u" . wal-avy-goto-word)
   ("i" . avy-goto-char-timer))

  :general
  ;; Lines.
  (editors "c" 'avy-copy-line 'avy-copy-region)
  (editors "x" 'avy-kill-whole-line 'avy-kill-region)
  (editors "m" 'avy-move-line 'avy-move-region)
  (editors "w"
    'avy-kill-ring-save-whole-line
    'avy-kill-ring-save-region))
#+END_SRC

** dogears

Move back to previous significant places.

#+begin_src emacs-lisp
(use-package dogears
  :defer 3

  :config
  (dogears-mode)

  (defvar-keymap dogears-repeat-map
    :doc "Keymap to repeat various `dogears' commands."
    :repeat t
    "n" 'dogears-forward
    "p" 'dogears-back)

  :custom
  (dogears-sidebar-alist '((side . bottom)))
  (dogears-idle 10)
  (dogears-message nil)
  (dogears-ignore-modes '(dogears-list-mode helpful-mode compilation-mode))
  (dogears-hooks nil)

  :general
  (ambassador
    "r" '(:ignore t :wk "dogears")
    "rg" 'dogears-go
    "rr" 'dogears-remember
    "rl" 'dogears-list
    "rn" 'dogears-forward
    "rp" 'dogears-back))
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-movement)

;;; wal-movement.el ends here
#+END_SRC
