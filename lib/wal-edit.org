#+TITLE: Editing
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }
#+TAGS: { usage : negligible(i) low(l) medium(u) high(h) }

It's fun to edit things /quickly/.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-edit.el --- Editing. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide editing packages.

;;; Code:

(eval-when-compile
  (require 'wal-key-bindings nil t))
#+END_SRC

* Packages

** multiple-cursors                                           :nongnu:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't you want to edit your buffer in multiple places at once? This sets up the package to work nicely with other packages (for example, we don't want to complete with =corfu= while multiple are active). This creates a repeat map to manage the cursors.

#+BEGIN_SRC emacs-lisp
(defvar wal-mc-conflicting-modes '(puni-mode corfu-mode electric-indent-mode)
  "Modes that are in conflict with `multiple-cursors-mode'.")

(defvar-local wal-mc-disabled nil
  "Modes that were disabled before entering `multiple-cursors-mode'.")

(defun wal-before-mc ()
  "Disable conflicting modes before entering mode."
  (seq-each
   (lambda (it)
     (when (and (boundp it) (symbol-value it))
       (setq wal-mc-disabled (append wal-mc-disabled `(,it)))
       (eval `(,it -1))))
   wal-mc-conflicting-modes))

(defun wal-after-mc ()
  "Re-enable modes that were disabled before exiting."
  (seq-each (lambda (it) (eval `(,it 1))) wal-mc-disabled)
  (setq wal-mc-disabled nil))

(use-package multiple-cursors
  :init
  (defvar-keymap multiple-cursors-repeat-map
    :doc "Keymap to repeat `mutliple-cursors' commands."
    :repeat t
    "." 'mc/mark-next-like-this
    "<" 'mc/mark-previous-like-this
    "," 'mc/unmark-next-like-this
    ">" 'mc/unmark-previous-like-this
    "?" 'mc/skip-to-previous-like-this
    "/" 'mc/skip-to-next-like-this)

  :hook
  ((multiple-cursors-mode-enabled . wal-before-mc)
   (multiple-cursors-mode-disabled . wal-after-mc))

  :wal-bind
  ("<mouse-3>" . mc/add-cursor-on-click)

  :bind
  ("C-." . mc/mark-next-like-this)

  :general
  (editors "." 'mc/mark-all-like-this  'mc/edit-ends-of-lines))
#+END_SRC

** expand-region                                                    :gnu:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

One thing that can be a bit tricky is selecting regions, not anymore.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (defvar-keymap expand-region-repeat-map
    :doc "Keymap to repeat various `expand-region' commands."
    :repeat t
    ">" 'er/expand-region
    "<" 'er/contract-region)

  :bind
  (("C->" . er/expand-region)))
#+END_SRC

** elec-pair                                             :builtin:negligible:
:PROPERTIES:
:UNNUMBERED: t
:END:

Less intrusive pairing mode than =smartparens=.

#+BEGIN_SRC emacs-lisp
(defun wal-in-case-of-mc-mode-do-not-default (&rest _args)
  "Advise to inhibit if `multiple-cursors-mode' is t."
  (bound-and-true-p multiple-cursors-mode))

(use-package elec-pair
  :hook ((prog-mode harpoon-prog-like) . electric-pair-local-mode)

  :init
  (advice-add
   'electric-pair-default-inhibit :before-until
   #'wal-in-case-of-mc-mode-do-not-default))
#+END_SRC

** hide-show                                             :builtin:negligible:

Hide (and show) blocks.

#+begin_src emacs-lisp
(use-package hideshow
  :hook ((prog-mode harpoon-prog-like) . hs-minor-mode)

  :bind
  (:map hs-minor-mode-map
   ("C-c h" . hs-hide-block)
   ("C-c M-h" . hs-show-block)
   ("C-c H" . hs-hide-level)
   ("C-c M-H" . hs-show-all)))
#+end_src

** surround                                                :melpa:negligible:

Surround things with pairs and use surrounding pairs to act upon enclosed content.

#+begin_src emacs-lisp
(use-package surround
  :general
  (editors "s" 'surround-insert 'surround-kill))
#+end_src

** puni                                                        :melpa:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

Deal with the parens.

#+BEGIN_SRC emacs-lisp
(use-package puni
  :init
  ;; This package doesn't have a lighter.
  (add-to-list 'minor-mode-alist (list 'puni-mode " pni"))

  :config
  (defvar-keymap wal-puni-map
    :doc "Keymap to execute useful `puni' commands anywhere."
    :repeat t
    "c" 'puni-convolute
    "r" 'puni-raise
    "v" 'puni-barf-backward
    "b" 'puni-barf-forward
    "a" 'puni-slurp-backward
    "s" 'puni-slurp-forward
    "p" 'puni-split
    "q" 'puni-squeeze
    "l" 'puni-splice)

   (that-key "puni" :key "C-c p")

   :bind-keymap
   (("C-c p" . wal-puni-map))

   :defines (puni-mode-map))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-edit)

;;; wal-edit.el ends here
#+END_SRC
