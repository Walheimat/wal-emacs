#+TITLE: Editing
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (expand-file-name "wal-edit.el" wal-emacs-config-build-path)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

It's fun to edit things /quickly/.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-edit.el --- Editing. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide editing packages.

;;; Code:

(eval-when-compile
  (require 'wal-key-bindings nil t))

(declare-function wal-list-from "wal-useful.el")

(defvar corfu-mode)
(defvar wal-emacs-config-default-path)
#+END_SRC

* Packages

** multiple-cursors                                                  :nongnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't you want to edit your buffer in multiple places at once? This
sets up the package to work nicely with other packages (for example,
we don't want to complete with =corfu= while multiple are active).
This creates a repeat map to manage the cursors.

#+BEGIN_SRC emacs-lisp
(defvar wal-mc-conflicting-modes '(puni-mode corfu-mode electric-indent-mode)
  "Modes that are in conflict with `multiple-cursors-mode'.")

(defvar-local wal-mc-disabled nil
  "Modes that were disabled before entering `multiple-cursors-mode'.")

(defun wal-before-mc ()
  "Disable conflicting modes before entering mode."
  (seq-each
   (lambda (it)
     (when (and (boundp it) (symbol-value it))
       (setq wal-mc-disabled (append wal-mc-disabled `(,it)))
       (eval `(,it -1))))
   wal-mc-conflicting-modes))

(defun wal-after-mc ()
  "Re-enable modes that were disabled before exiting."
  (seq-each (lambda (it) (eval `(,it 1))) wal-mc-disabled)
  (setq wal-mc-disabled nil))

(use-package multiple-cursors
  :init
  (defvar-keymap multiple-cursors-repeat-map
    :doc "Keymap to repeat `mutliple-cursors' commands."
    :repeat t
    "." 'mc/mark-next-like-this
    ">" 'mc/mark-previous-like-this
    "," 'mc/unmark-next-like-this
    "<" 'mc/unmark-previous-like-this
    "p" 'mc/skip-to-previous-like-this
    "n" 'mc/skip-to-next-like-this)

  :hook
  ((multiple-cursors-mode-enabled . wal-before-mc)
   (multiple-cursors-mode-disabled . wal-after-mc))

  :wal-bind
  ("<mouse-3>" . mc/add-cursor-on-click)

  :bind
  ("C-." . mc/mark-next-like-this)

  :general
  (editors "." 'mc/mark-all-like-this  'mc/edit-ends-of-lines))
#+END_SRC

** expand-region                                                        :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

One thing that can be a bit tricky is selecting regions, not anymore.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  (("C->" . er/expand-region)
   ("C-<" . er/contract-region)))
#+END_SRC

** tempel                                                               :gnu:
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't reduce the boilerplate, reduce your involvement in it with
snippets. Completing these snippets is bound to a custom binding.

#+BEGIN_SRC emacs-lisp
(defun wal-tempel-comment (elt)
  "Comment the element ELT according to mode."
  (when (eq (car-safe elt) 'c)
    (let ((cs (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start)))

      (concat cs (cadr elt)))))

(use-package tempel
  :config
  (setq tempel-path (wal-list-from
                     'tempel-path
                     (expand-file-name
                      "data/tempel.eld"
                      wal-emacs-config-default-path)))

  :custom
  (tempel-user-elements '(wal-tempel-comment))
  (tempel-mark (propertize "â–‘" 'face 'mode-line-highlight))

  :bind
  (:map tempel-map
   ("M-k" . tempel-kill)
   ("M-a" . tempel-beginning)
   ("M-e" . tempel-end)
   ("M-n" . tempel-next)
   ("M-p" . tempel-previous))

  :wal-bind
  (("\\" . tempel-complete)))
#+END_SRC

** elec-pair                                                        :builtin:
:PROPERTIES:
:UNNUMBERED: t
:END:

Less intrusive pairing mode than =smartparens=.

#+BEGIN_SRC emacs-lisp
(defun wal-in-case-of-mc-mode-do-not-default (&rest _args)
  "Advise to inhibit if `multiple-cursors-mode' is t."
  (bound-and-true-p multiple-cursors-mode))

(use-package elec-pair
  :hook ((prog-mode harpoon-prog-like) . electric-pair-local-mode)

  :init
  (advice-add
   'electric-pair-default-inhibit :before-until
   #'wal-in-case-of-mc-mode-do-not-default))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-edit)

;;; wal-edit.el ends here
#+END_SRC
