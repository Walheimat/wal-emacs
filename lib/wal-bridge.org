#+TITLE: Bridge
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (expand-file-name "wal-bridge.el" wal-emacs-config-build-path)

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-bridge.el --- Integration of my own packages. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Set up my own packages.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t))

(declare-function junk-setup-use-package "ext:junk.el")
(declare-function whale-line-mode "ext:whale-line.el")
(declare-function wal-insert "wal-useful.el")
(declare-function partial-recall-mode "ext:partial-recall.el")

(defvar whale-line-animation-key-frames)

(defgroup wal-bridge nil
  "Change settings for bridge packages."
  :group 'wal
  :tag "Bridge")
#+END_SRC

* Packages

** harpoon
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package harpoon
  :demand t

  :custom
  (harpoon-lsp-completion-styles '(orderless partial-completion basic))
  (harpoon-major-key (wal-key-combo-for-leader 'major))
  (harpoon-lsp-function 'lsp-deferred)
  (harpoon-lsp-dir-ignore-list 'lsp-file-watch-ignored-directories))
#+end_src

** partial-recall
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package partial-recall
  :defer 1

  :config
  (partial-recall-mode 1)

  (with-eval-after-load 'consult
    (wal-insert
     'consult-buffer-sources
     'consult--source-buffer
     'partial-recall--consult-buffer-source))

  (with-eval-after-load 'marginalia
    (wal-append
     'marginalia-command-categories
     '((partial-recall-switch-to-buffer . buffer)
       (partial-recall-implant . buffer)
       (partial-recall-lift . buffer)
       (partial-recall-reclaim . buffer)
       (partial-recall-forget . buffer)
       (partial-recall-reinforce . buffer)
       (partial-recall-remember . buffer))))

  :general
  (ambassador "p" '(:keymap partial-recall-command-map :wk "partial recall")))
#+end_src

** whale-line
:PROPERTIES:
:UNNUMBERED: t
:END:

My own mode line.

#+BEGIN_SRC emacs-lisp
(use-package whale-line
  :defer 1

  :config
  (when (boundp 'wal-ascii-blue-whale-key-frames)
    (setq whale-line-segments-animation-key-frames wal-ascii-blue-whale-key-frames))

  (whale-line-mode 1)

  :custom
  (whale-line-segments-project-icon '(octicon . "package")))
#+END_SRC

** junk
:PROPERTIES:
:UNNUMBERED: t
:END:

My way of defining optional packages.

#+begin_src emacs-lisp
(use-package junk
  :config
  (junk-setup-use-package))
#+end_src

** bydi
:PROPERTIES:
:UNNUMBERED: t
:END:

Testing macros.

#+BEGIN_SRC emacs-lisp
(use-package bydi)
#+END_SRC

** parallel
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package parallel)
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(defvar harpoon--stumps nil)
(defvar junk--stumps nil)
(defvar parallel--stumps nil)

;; Guard against missing macros.
(unless (featurep 'harpoon)
  (defmacro harpoon (name &rest _args)
    "Push message that mode NAME would have been skewered."
    `(push ',name harpoon--stumps)))

(unless (featurep 'junk)
  (defmacro junk-expand (name &rest _args)
    "Push message that mode NAME would create junk."
    `(push ',name junk--stumps)))

(unless (featurep 'parallel)
  (defmacro parallel (a b)
    "Push message that A and B would have been parallelized."
    `(push ',(intern (concat (symbol-name a) (symbol-name b))) parallel--stumps)))

(provide 'wal-bridge)

;;; wal-bridge.el ends here
#+END_SRC
