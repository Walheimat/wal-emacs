#+TITLE: Bridge
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (expand-file-name "wal-bridge.el" wal-emacs-config-build-path)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }

This is a collection of my own packages that are sourced from GitHub.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-bridge.el --- Integration of my own packages. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Set up my own packages.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t))

(declare-function junk-setup-use-package "ext:junk.el")
(declare-function whale-line-mode "ext:whale-line.el")
(declare-function wal-insert "wal-useful.el")
(declare-function partial-recall-mode "ext:partial-recall.el")

(defvar marginalia-annotator-registry)
(defvar marginalia-command-categories)
(defvar whale-line-animation-key-frames)

(defgroup wal-bridge nil
  "Change settings for bridge packages."
  :group 'wal
  :tag "Bridge")
#+END_SRC

* Packages

** harpoon                                                              :git:
:PROPERTIES:
:UNNUMBERED: t
:END:

Provides a =use-package=-like macro to define a function to hook into
and set up transient, completion, modes, ligatures, LSP and
indentation for major modes.

See [[file:wal-lang.org][Languages]] for usage or the [[https://github.com/Walheimat/harpoon][repository]] for more info.

#+begin_src emacs-lisp
(use-package harpoon
  :demand t

  :custom
  (harpoon-major-key (wal-key-combo-for-leader 'major))
  (harpoon-checker-function 'flycheck-mode)
  (harpoon-lsp-completion-styles '(orderless partial-completion basic))

  (harpoon-lsp-function 'lsp-deferred)
  (harpoon-lsp-dir-ignore-list 'lsp-file-watch-ignored-directories))
#+end_src

** partial-recall                                                       :git:
:PROPERTIES:
:UNNUMBERED: t
:END:

Enhances =tab-bar-mode= to become a short-term-memory workspace.
Buffers opened in a tab belong to that tab. The management of
(permanently) adding, removing etc. that buffer is based on usage of
that buffer (re-visiting, keeping it visible) and other buffers.

The package provides a =consult= buffer source that we insert. The
various buffer-related commands are annotated with =marginalia= and
the command map is bound in [[file:wal-key-bindings.org::*Ambassador][ambassador]].

See the [[https://github.com/Walheimat/partial-recall][repository]] for more information.

#+begin_src emacs-lisp
(use-package partial-recall
  :defer 1

  :config
  (partial-recall-mode 1)

  (with-eval-after-load 'consult
    (wal-insert
     'consult-buffer-sources
     'consult--source-buffer
     'partial-recall--consult-buffer-source
     :quiet t))

  (with-eval-after-load 'marginalia
    (wal-append
     'marginalia-command-categories
     '((partial-recall-switch-to-buffer . buffer)
       (partial-recall-implant . buffer)
       (partial-recall-lift . buffer)
       (partial-recall-reclaim . buffer)
       (partial-recall-forget . buffer)
       (partial-recall-reinforce . buffer)
       (partial-recall-remember . buffer))))

  :general
  (ambassador "p" '(:keymap partial-recall-command-map :wk "partial recall")))
#+end_src

** whale-line                                                           :git:
:PROPERTIES:
:UNNUMBERED: t
:END:

My own "fancy" mode line. It has segments for all default mode-line
constructs as well as segments for =partial-recall=, =vc=, =project=,
=tab-bar-mode=, =multiple-cursors=, =org=, =minions=, =lsp-mode=,
=dap-mode=.

The mode line is divided into left and right justified by space. Which
segments are shown is based on whether the window is selected as well
as priority considerations if space is low.

The icon for buffer status is disabled and we use the UTF-8-heavy
whale instead for the animation segment.

See the [[https://github.com/Walheimat/whale-line][repository]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package whale-line
  :defer 1
  :after wal-config

  :config
  (setq  mode-line-position-column-line-format '(" %l:%c"))

  (whale-line-mode 1)

  :custom
  (whale-line-iconify-disabled '(buffer-status))
  (whale-line-segments-animation-key-frames wal-ascii-blue-whale-key-frames)

  :defines (whale-line-segments-animation-key-frames))
#+END_SRC

** junk                                                                 :git:
:PROPERTIES:
:UNNUMBERED: t
:END:

Provides a macro to define package groups and optional packages for
that group. You can use =junk-install= (bound in [[file:wal-key-bindings.org::*Whaler][whaler]]) to install
such packages. It uses =marginalia= to provide annotations that
indicate which packages are already installed.

See the [[https://github.com/Walheimat/junk][repository]] for more information.

#+begin_src emacs-lisp
(use-package junk
  :config
  (junk-setup-use-package)

  (with-eval-after-load 'marginalia
    (add-to-list 'marginalia-annotator-registry '(expansion-pack junk-annotate builtin none))
    (add-to-list 'marginalia-command-categories '(junk-install . expansion-pack))))
#+end_src

** bydi                                                                 :git:
:PROPERTIES:
:UNNUMBERED: t
:END:

Provides macros to mock functions and watch variables in =ert= tests.
This package is generally not needed unless you want to create tests.

See [[https://github.com/Walheimat/bydi][repository]] for more information and usage or check out the various
tests under =/test/=.

#+BEGIN_SRC emacs-lisp
(use-package bydi)
#+END_SRC

** parallel                                                             :git:
:PROPERTIES:
:UNNUMBERED: t
:END:

Provides a macro to compose two commands into one while retaining
their consumption of prefix arguments. When calling the composition,
the first command is executed unless it is called with a numeric
prefix argument. The first command always uses the normal =C-u=, the
second =C-<number>=.

See the [[https://github.com/Walheimat/parallel][repository]] for more information.

#+begin_src emacs-lisp
(use-package parallel)
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(defvar harpoon--stumps nil)
(defvar junk--stumps nil)
(defvar parallel--stumps nil)

;; Guard against missing macros.
(unless (featurep 'harpoon)
  (defmacro harpoon (name &rest _args)
    "Push message that mode NAME would have been skewered."
    `(push ',name harpoon--stumps)))

(unless (featurep 'junk)
  (defmacro junk-expand (name &rest _args)
    "Push message that mode NAME would create junk."
    `(push ',name junk--stumps)))

(unless (featurep 'parallel)
  (defmacro parallel (a b)
    "Push message that A and B would have been parallelized."
    `(push ',(intern (concat (symbol-name a) (symbol-name b))) parallel--stumps)))

(provide 'wal-bridge)

;;; wal-bridge.el ends here
#+END_SRC
