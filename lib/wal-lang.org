#+TITLE: Languages
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)
#+TAGS: { package : builtin(b) melpa(m) gnu(e) nongnu(n) git(g) }
#+TAGS: { usage : negligible(i) low(l) medium(u) high(h) }

Let's greet the world.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-lang.el --- Languages. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provide Emacs settings/configurations.

;;; Code:

(eval-when-compile
  (require 'wal-useful nil t)
  (require 'wal-key-bindings nil t)
  (require 'wal-visuals nil t)
  (require 'wal-lsp nil t)
  (require 'wal-bridge nil t))

(declare-function cape-wrap-buster "ext:cape.el")
(declare-function markdown-mode "ext:markdown-mode.el")
(declare-function markdown-view-mode "ext:markdown-mode.el")
(declare-function mixed-pitch-mode "ext:markdown-mode.el")
(declare-function transient--default-infix-command "ext:transient.el")
(declare-function transient--show "ext:transient.el")
(declare-function transient--suffix-only "ext:transient.el")
(declare-function transient-prefix "ext:transient.el")
(declare-function transient-set "ext:transient.el")
(declare-function transient-setup "ext:transient.el")
(declare-function transient-suffix-object "ext:transient.el")
(declare-function transient-switches "ext:transient.el")
(declare-function wal-advise-many "wal-useful.el")
(declare-function wal-modern-emacs-p "wal-useful.el")
(declare-function wal-set-ligatures "ext:wal-visuals.el")
(declare-function wal-transient-grab "wal-key-bindings.el")
(declare-function wdb-faraway "wal-useful.el")

(defvar inferior-lisp-program)

(defgroup wal-lang nil
  "Change language-specific settings."
  :group 'wal
  :tag "Langauge")
#+END_SRC

* Elixir

Bitches brew.

#+BEGIN_SRC emacs-lisp
(junk-expand elixir
  "For Elixir developers."
  :packages (elixir-mode))
#+END_SRC

** elixir-mode                                                   :nongnu:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :init
  (harpoon elixir-mode
    :lsp t
    :messages ("Mixin' potions" "A hex on you")
    :functions (abbrev-mode)
    :ligatures ("|>" "->" "<-" "=>"
                "::" "<>" "#{" "\\\\"
                "===" "!==" ".."))

  :config
  (define-abbrev-table 'elixir-mode-abbrev-table '(("p" "|>"))))
#+END_SRC

* C/C++

I want to be ready for =jai=.

** c++-mode                                                     :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :init
  (harpoon c++-mode
    :lsp t
    :bind t
    :ligatures ("::" "->")
    :messages ("Make tidy! Make clean!" "Serenity now!"))

  (harpoon c-mode
    :lsp t
    :ligatures ("->"))

  :config
  ;; Eliminate conflicts with `delight'.
  (advice-add 'c-update-modeline :override #'ignore)

  (wal-transient-define-major c++-mode ()
    "Access `c++-mode' commands."
    [["Style"
      ("s" "set" c-set-style)
      ("g" "guess (using buffer)" c-guess-buffer)]])

  :custom
  (c-ts-mode-indent-offset 4))
#+END_SRC

* Rust

Consider the lobster.

#+BEGIN_SRC emacs-lisp
(junk-expand rust
  "For Rust developers."
  :packages (rust-mode cargo))
#+END_SRC

** rust-mode                                                    :nongnu:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Follow [[https://rust-analyzer.github.io/manual.html#rust-analyzer-language-server-binary][these instructions]] to download the =rust-analyzer= binary.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :if (executable-find "cargo")

  :init
  (harpoon rust-mode
    :lsp (:format t)
    :bind t
    :ligatures ("///" "->" "=>" "::" ".." "#[")
    :messages ("Consider the lobster"))

  :config
  ;; Load default `dap-mode' templates.
  (with-eval-after-load 'dap-mode
    (require 'dap-cpptools))

  (wal-transient-define-major rust-mode ()
    "Access `rust-mode' commands."
    [["Commands"
      ("b" "build" cargo-process-build)
      ("r" "run" cargo-process-run)
      ("e" "example" cargo-process-run-example)
      ("a" "add" cargo-process-add)]
     ["Test"
      ("t" "test all" cargo-process-test)
      ("c" "current" cargo-process-current-test)
      ("f" "file" cargo-process-current-file-tests)]])

  (with-eval-after-load 'lsp-mode
    (transient-append-suffix 'rust-mode-major '(0 0 -1)
      '("d" "debug" lsp-rust-analyzer-debug))))
#+END_SRC

** cargo                                                         :melpa:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package cargo)
#+END_SRC

* Zig

Just one more language.

#+begin_src emacs-lisp
(junk-expand zig
  "For Zig developers."
  :packages (zig-mode))
#+end_src

** zig-mode                                                      :nongnu:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package zig-mode
  :if (executable-find "zig")

  :init
  (harpoon zig-mode
    :lsp (:format t :hints t)
    :ligatures (".." "=>" "///")
    :messages ("Lizard-brain is fast")))
#+end_src

* Python

Hide those details from me.

** python                                                             :melpa:
:PROPERTIES:
:UNNUMBERED: t
:END:

Use snake when you can't =make=.

#+BEGIN_SRC emacs-lisp
(defun wal-in-python-project-p (&optional marker-file)
  "Check if we're currently in a Python project.

Unless another MARKER-FILE is provided, this will use the usual
TOML."
  (and-let* ((marker (or marker-file "pyproject.toml"))
             (current default-directory)
             (project-directory (locate-dominating-file current marker)))))

(use-package python
  :init
  (harpoon python-mode
    :bind t
    :lsp
    (:ignore-dirs (".pytype" "__pycache__" ".pytest_cache" "typings"))
    :ligatures ("->" "__")
    :messages ("Watch out for snakes!" "Vegetation, aggravation")
    :before (pet-mode)

    (when (fboundp 'pet-executable-find)
      (setq lsp-pylsp-server-command (list (pet-executable-find "pylsp"))))

    (setq-local comment-inline-offset 2))

  :config
  ;; Load default `dap-mode' templates.
  (with-eval-after-load 'dap-mode
    (require 'dap-python))

  (wal-transient-define-major python-mode ()
    "Access `python-mode' commands."
    [["Commands"
	  ("r" "run inferior shell" run-python)]]))
#+END_SRC

** pet                                                            :melpa:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Takes care of setting the correct virtual env.

#+begin_src emacs-lisp
(use-package pet
  :config
  (pet-flycheck-setup)

  :functions (pet-flycheck-setup)

  :delight " pet")
#+end_src

* Lisp

The philosopher's choice.

#+BEGIN_SRC emacs-lisp
(junk-expand lisp
  "For (common-) Lisp developers using sbcl."
  :extras (slime))

(junk-expand clojure
  "For Clojure developers using cider with lein."
  :packages (clojure-mode cider))
#+END_SRC

** elisp-mode                                                  :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :init
  (harpoon emacs-lisp-mode
    :bind t
    :checker flymake-mode
    :messages ("So it's just a bunch of lists?" "List your lambdas")
    :functions (prettify-symbols-mode))

  :config
  (wal-transient-define-major emacs-lisp-mode ()
    "Access `elisp' commands."
    [["Utility"
      ("c" "check parens" check-parens)
      ("d" "edebug function" edebug-defun)
      ("h" "helpful" helpful-at-point)
      ("m" "expand macro" emacs-lisp-macroexpand)]]))
#+END_SRC

** lisp-mode                                                   :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :init
  (harpoon common-lisp-mode
    :bind t)

  (harpoon lisp-data-mode
    :flat t
    :ligatures (";;" ";;;"))

  :config
  (add-to-list 'auto-mode-alist '("Cask\\'" . lisp-data-mode))

  (with-eval-after-load 'slime
    (wal-transient-define-major common-lisp-mode ()
      "Access `slime' actions."
      [["Slime"
        ("s" "slime" slime-mode)
        ("r" "open REPL" slime)]])))
#+END_SRC

* JavaScript

Can we have =deno= instead of =node=?

#+BEGIN_SRC emacs-lisp
(junk-expand javascript
  "For Node.js developers."
  :packages (add-node-modules-path prettier)
  :extras (typescript-mode))
#+END_SRC

** js                                                          :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defvar wal-jest-compilation-error-regexp
  '(jest
    "^[[:blank:]]+at [^\n\r]+ (\\([^\n\r]+\\(?:.spec\\|.test\\)?.\\(?:js\\|jsx\\)\\):\\([0-9]+\\):\\([0-9]+\\))$"
    1 2 3)
  "Regular expression used for jest errors.")

(use-package js
  :mode ("^\.\\(.*\\)rc$" . js-json-mode)

  :init
  (harpoon js-mode
    :messages ("NaN !== NaN" "Null falsy values or undefined")
    :bind t
    :tabs t
    :lsp (:ignore-dirs ("vendor" "build"))
    :ligatures ("=>" "!==" "===" "!!")
    :functions (add-node-modules-path prettier-mode subword-mode)

    (setq-local compilation-error-screen-columns nil))

  (harpoon js-json-mode
    :messages ("JSON! JSON? JSON!?")
    :tabs t
    :lsp t
    :functions (add-node-modules-path prettier-mode))

  :config
  (when (wal-modern-emacs-p 29)
    (bind-key "M-." nil js-ts-mode-map))

  ;; Load default `dap-mode' templates.
  (with-eval-after-load 'dap-mode
    (require 'dap-node))

  (wal-transient-define-major js-mode ()
    "Access JS commands."
    [["Actions"
      ("c" "context" js-syntactic-context)]])

  ;; Add regular expression for jest errors.
  (add-to-list 'compilation-error-regexp-alist 'jest)
  (add-to-list
   'compilation-error-regexp-alist-alist
   wal-jest-compilation-error-regexp)

  :bind
  (:map js-mode-map
   ("M-." . nil)))
#+END_SRC

** typescript-mode                                            :nongnu:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

Please use TypeScript.

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\(x\\)?\\'"

  :init
  (harpoon typescript-mode
    :messages ("This is any, that is any, everything is any!")
    :tabs t
    :lsp t
    :ligatures ("=>" "!==" "===" "!!")
    :functions (add-node-modules-path prettier-mode subword-mode)))
#+END_SRC

** add-node-modules-path                                         :melpa:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Allow accessing a project's =node_modules=.

#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :wal-ways t)
#+END_SRC

** prettier                                                      :melpa:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Prettify your ugly JavaScript.

#+BEGIN_SRC emacs-lisp
(defun wal-instead-delay-prettier-errors (string &rest objects)
  "Treat prettier errors like warnings.

STRING is formatted with OBJECTS."
  (let ((formatted (apply #'format string objects)))

    (delay-warning 'prettier formatted :warning)))

(use-package prettier
  :config
  (with-eval-after-load 'js
    (transient-append-suffix 'js-mode-major '(0 0 0)
      '("p" "prettier" prettier-prettify))
    (transient-append-suffix 'js-mode-major '(0 0 0)
      '("P" "restart prettier" prettier-restart)))

  ;; Copy JSON parsers for newer major modes.
  (mapc
   (lambda (it)
     (add-to-list
      'prettier-major-mode-parsers
      (cons it (cdr-safe (assoc 'json-mode prettier-major-mode-parsers)))))
   '(js-json-mode json-ts-mode))

  (advice-add
   'prettier--show-error :override
   #'wal-instead-delay-prettier-errors)

  :custom
  (prettier-lighter " prt")

  :defines (prettier-major-mode-parsers))
#+END_SRC

* Scripting

#+BEGIN_SRC emacs-lisp
(junk-expand fish
  "For fish shell users."
  :packages (fish-mode))

(junk-expand cli
  "For CLI power users."
  :packages (crontab-mode))
#+END_SRC

** sh-script                                                   :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Bash your head in!

#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :init
  (harpoon sh-mode
    :lsp t
    :messages ("Sh..sh..h.." "Bash your head in")
    :ligatures ("::"))

  :custom
  (sh-basic-offset 2)
  (sh-indent-after-continuation nil))
#+END_SRC

** crontab-mode                                                   :melpa:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes you have to deal with things at their time.

#+BEGIN_SRC emacs-lisp
(use-package crontab-mode)
#+END_SRC

** fish-mode                                                      :melpa:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

Support =fish= functions.

#+BEGIN_SRC emacs-lisp
(use-package fish-mode
  :custom
  (fish-indent-offset 2))
#+END_SRC

** conf-mode                                                    :builtin:low:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :hook (conf-mode . harpoon-prog-like))
#+END_SRC

* Markup

Sometimes things that don't do things need to look nice.

#+BEGIN_SRC emacs-lisp
(junk-expand markdown
  "For MD users."
  :packages (markdown-mode))
#+END_SRC

** markdown-mode                                              :nongnu:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal-markdown-view ()
  "Toggle between different markdown views."
  (interactive)

  (cond
   ((eq major-mode 'markdown-mode)
    (markdown-view-mode)
    (mixed-pitch-mode 1))
   ((eq major-mode 'markdown-view-mode)
    (markdown-mode)
    (mixed-pitch-mode -1))
   (t
    (error "Can't change view outside of markdown modes"))))

(use-package markdown-mode
  :init
  (harpoon markdown-mode
    :bind t
    :lsp t
    :functions (prettier-mode))

  :config
  (wal-transient-define-major markdown-mode ()
    "Access `markdown-mode' commands."
    [["View"
      ("v" "toggle view" wal-markdown-view)]])

  :custom
  (markdown-asymmetric-header t)

  :bind
  (:map markdown-mode-map
   ("M-<up>" . markdown-move-list-item-up)
   ("M-<down>" . markdown-move-list-item-down))

  :defines (markdown-mode-map))
#+END_SRC

* Java

It's a =JavaEmacsPackageConfigurationSectionFactory=, mate.

#+BEGIN_SRC emacs-lisp
(junk-expand java
  "Java expansions."
  :packages (lsp-java)
  :extras (jenkinsfile-mode groovy-mode))
#+END_SRC

** java-mode                                                   :builtin:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

For some reason, this is also defined in =cc-mode=.

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :init
  (harpoon java-mode
    :lsp (:ignore-dirs (".gradle"))
    :bind t
    :messages ("Mmmh ... maven")
    :ligatures ("::" "->" "@_" ">>>")
    :functions (subword-mode)))
#+END_SRC

** lsp-java                                                      :melpa:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

LSP integration.

#+begin_src emacs-lisp
(defun wal-with-bash-shell (fun &rest args)
  "Run FUN with ARGS in bash shell."
  (let ((shell-file-name "/bin/bash"))

    (apply fun args)))

(defun wal-java-test-dwim ()
  "Run or debug test or class depending on ARGS."
  (interactive)

  (if-let* ((mode (wal-transient-grab "mode"))
            (scope (wal-transient-grab "scope"))
            (fun (intern (format "dap-java-%s-test-%s" mode scope))))

      (progn (transient-set)
             (call-interactively fun))
    (message "Select scope and mode")))

(defun wal-junit-match-file ()
  "Find the buffer associated with the matched error."
  (save-match-data
    (let* ((file (match-string 2))
           (buffer (cl-find-if
                    (lambda (it)
                      (when-let ((name (buffer-file-name it)))
                        (string-match file name)))
                    (buffer-list))))

      (if buffer
          (buffer-file-name buffer)
        file))))

(defvar wal-junit-compilation-error-regexp
  '(junit
    "^[[:blank:]]+\\(?:at \\)?\\([^\n\r]+\\)(\\([^\n\r]+.java\\):\\([0-9]+\\))"
    wal-junit-match-file
    3)
  "Regular expression used for JUnit errors.")

(use-package lsp-java
  :config
  (with-eval-after-load 'dap-mode
    (require 'dap-java))

  ;; Use bash shell for JUnit commands.
  (wal-advise-many
   'wal-with-bash-shell :around
   '(dap-java-debug-test-class
     dap-java-debug-test-method
     dap-java-run-test-class
     dap-java-run-test-method))

  (transient-define-argument wal-java-mode-switch ()
    "Switch modes."
    :description "Run in"
    :class 'transient-switches
    :argument-format "--mode=%s"
    :argument-regexp "\\(--mode=\\(run\\|debug\\)\\)"
    :choices '("run" "debug"))

   (transient-define-argument wal-java-scope-switch ()
    "Switch scopes."
    :description "Use"
    :class 'transient-switches
    :argument-format "--scope=%s"
    :argument-regexp "\\(--scope=\\(method\\|class\\)\\)"
    :choices '("method" "class"))

  (wal-transient-define-major java-mode ()
    "Access `java-mode' commands."
    :value '("--mode=run" "--scope=method")

    ["Test"
     ("m" wal-java-mode-switch)
     ("s" wal-java-scope-switch)
     ""
     ("t" "test" wal-java-test-dwim)])

  ;; Add regular expression for JUnit errors.
  (add-to-list 'compilation-error-regexp-alist 'junit)
  (add-to-list
   'compilation-error-regexp-alist-alist
   wal-junit-compilation-error-regexp)

  :custom
  (lsp-java-format-on-type-enabled nil) ; Suggested fix for failing completion.
  (lsp-java-references-code-lens-enabled t)
  (lsp-java-implementations-code-lens-enabled t)
  (lsp-java-signature-help-enabled nil))
#+end_src

** groovy-mode                                                    :melpa:low:

Editing groovy scripts.

#+begin_src emacs-lisp
(use-package groovy-mode
  :init
  (harpoon groovy-mode
    :lsp t
    :messages ("Bust-a-Groove")))
#+end_src

** jenkinsfile-mode                                               :melpa:low:

Syntax highlighting.

#+begin_src emacs-lisp
(use-package jenkinsfile-mode
  :mode ("Jenkins" . jenkinsfile-mode))
#+end_src

* PHP

The elephant in the room.

#+BEGIN_SRC emacs-lisp
(junk-expand php
  "Major mode and web mode for templates."
  :packages (php-mode))
#+END_SRC

* Web

Does anyone actually like web development?

#+BEGIN_SRC emacs-lisp
(junk-expand web
  "For web developers."
  :packages (yaml-mode)
  :extras (pug-mode po-mode web-mode))
#+END_SRC

*** mhtml-mode                                               :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package mhtml-mode
  :init
  (harpoon mhtml-mode
    :lsp t
    :messages ("Hodge-podge mark-up language")
    :ligatures ("<!--" "-->" "</" "/>")))
#+END_SRC

*** nxml-mode                                                :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package nxml-mode
  :init
  (harpoon nxml-mode
    :lsp t
    :messages ("Extreme mark-up language")
    :ligatures ("<!--" "-->" "</" "/>")
    :prog-like t)

  :custom
  (nxml-child-indent 4))
#+end_src

*** sgml-mode                                                :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

#+begin_src emacs-lisp
(use-package sgml-mode
  :custom
  (sgml-basic-offset 4)

  :bind
  (:map html-mode-map
   ("M-o" . nil)
   ("C-M-o" . facemenu-keymap)))
#+end_src

*** yaml-mode                                                    :melpa:high:
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes things that do as well.

#+BEGIN_SRC emacs-lisp
(defvar wal-yaml-common-offset 2
  "Common variable used for the offset of YAML-modes.")
(put 'wal-yaml-common-offset 'safe-local-variable #'integerp)

(use-package yaml-mode
  :mode "\\.\\(ya?ml\\|tpl\\)\\'" ; Helm templates.

  :init
  (harpoon yaml-mode
    :messages ("JSON?! ... Ah, thank God it's you, YAML!")
    :lsp t
    :prog-like t

    (setq-local standard-indent wal-yaml-common-offset)))
#+END_SRC

*** css-mode                                                 :builtin:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

We want quicker suggestions when in CSS modes.

#+BEGIN_SRC emacs-lisp
(defun wal-maybe-use-custom-css-checker ()
  "Use custom checker in `scss-mode' and `less-mode'."
  (when (executable-find "stylelint")
    (add-hook
     'lsp-after-open-hook
     (lambda ()
       (pcase major-mode
         ('scss-mode
          (setq-local flycheck-checker 'scss-stylelint))
         ('less-css-mode
          (setq-local flycheck-checker 'less-stylelint))
         (_
          (setq-local flycheck-checker 'css-stylelint))))
     nil t)))

(use-package css-mode
  :mode ("\\.rasi" . css-mode)

  :init
  (harpoon css-mode
    :lsp t
    :messages ("Centering? It's simple. Here's 15 ways to do it.")
    :functions (add-node-modules-path wal-maybe-use-custom-css-checker)))
#+END_SRC

* Games

#+BEGIN_SRC emacs-lisp
(junk-expand games
  "For game developers."
  :packages (gdscript-mode))
#+END_SRC

** gdscript-mode                                               :melpa:medium:
:PROPERTIES:
:UNNUMBERED: t
:END:

The engine you've been waiting for.

#+BEGIN_SRC emacs-lisp
(use-package gdscript-mode
  :init
  (harpoon gdscript-mode
    :messages ("I wish you were Estra-gone")
    :tabs t
    :lsp t)

  :config
  (advice-add
   'eglot-completion-at-point
   :around #'cape-wrap-buster))
#+END_SRC

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-lang)

;;; wal-lang.el ends here
#+END_SRC

* Footnotes

[fn:1] Currently requires [[https://daseldocs.tomwright.me/installation#manual ][dasel]].
