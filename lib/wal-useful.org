#+TITLE: Useful
#+AUTHOR: @Walheimat
#+PROPERTY: header-args:emacs-lisp :tangle (wal-tangle-target)

Custom useful functions, commands and macros.

* Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-useful.el --- Utilities. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Provides functions and macros to simplify various configurations.

;;; Code:

(require 'compile)
(require 'cl-seq)
(require 'subr-x)
(require 'treesit nil t)

(declare-function map-put! "ext:map.el")

(defvar wal-scratch-persist-file)
#+END_SRC

* Emacs

#+BEGIN_SRC emacs-lisp
(defun wal-modern-emacs-p (&optional min-version)
  "Check if we're using a modern version of Emacs.

If MIN-VERSION is set to a number, verify that current version is
at or above it."
  (if min-version
      (if (and (numberp min-version) (>= min-version 28))
          (>= emacs-major-version min-version)
        (user-error "Provided minimum version not acceptable"))
    (>= emacs-major-version 28)))
#+END_SRC

* Directories

Finding files should =mkdir -p= its parents.

#+BEGIN_SRC emacs-lisp
(defun wal-create-non-existent-directory ()
  "Ask whether to create non-existent directory.
If a file is found in a not (yet) existing directory, ask if it
should get created."
  (let ((parent-directory (file-name-directory buffer-file-name)))

    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Create non-existing directory `%s'? " parent-directory)))
      (make-directory parent-directory t))))
#+END_SRC

* Buffers

Utility functions to configure displaying buffers of a certain type.

#+BEGIN_SRC emacs-lisp
(defun wal-display-buffer--condition (buffer-or-mode)
  "Get a display buffer condition for BUFFER-OR-MODE."
  (pcase buffer-or-mode
    ((pred stringp) buffer-or-mode)
    ((pred symbolp) `(major-mode . ,buffer-or-mode))
    (_ (user-error "Call with string or symbol"))))

(defun wal-display-buffer--actions (&optional width height dedicated no-other)
  "Get (defaulting) `display-buffer' actions.

If DEDICATED is a boolean, WIDTH and HEIGHT are set as-is, if
NO-OTHER is t set the `window-parameter'."
  (delq nil `(,(when width
                 `(window-width . ,width))
              ,(when height
                 `(window-height . ,height))
              ,(when dedicated
                 `(dedicated . ,dedicated))
              ,(when no-other
                 '(window-parameters . ((no-other-window . t)))))))

(cl-defun wal-display-buffer-same-place-or-nearby (buffer &key side direction width height loose no-other)
  "Display BUFFER where it is or nearby.

This window will be on SIDE or in DIRECTION (both right by
default). The window will be dedicated unless LOOSE is t.

See `wal-display-buffer--actions' for explanations of WIDTH,
HEIGHT and NO-OTHER."
  (let ((condition (wal-display-buffer--condition buffer)))

    (add-to-list 'display-buffer-alist
                 `(,condition
                   ,(delq nil `(display-buffer-reuse-window
                                ,@(if direction
                                      '(display-buffer-in-direction display-buffer-in-side-window)
                                     '(display-buffer-in-side-window display-buffer-in-direction))
                                display-buffer-use-some-window))
                   (side . ,(or side 'right))
                   (direction . ,(or direction 'right))

                   ,@(wal-display-buffer--actions width height (not loose) no-other)))))

(defun wal-display-buffer-use-some-frame--with-display-p (frame)
  "Check that FRAME is not the selected frame and has a display entry."
  (when (eq 'x (framep (selected-frame)))
    (and (eq 'x (framep frame))
         (not (eq frame (selected-frame)))
         (get-lru-window frame)
         (cdr-safe (assoc 'display (frame-parameters frame))))))

(cl-defun wal-display-buffer-same-place-or-faraway (buffer &key width height bottom dedicated no-other)
  "Display BUFFER where it is or far away.

If BOTTOM is t, display at bottom. Otherwise tries to reuse
window first, then checks for another frame, then a pop-up and
lastly some window.

See `wal-display-buffer--actions' for explanations of WIDTH,
HEIGHT, DEDICATED and NO-OTHER."
  (let ((condition (wal-display-buffer--condition buffer)))

    (add-to-list 'display-buffer-alist
                 `(,condition
                   ,(delq nil `(display-buffer-reuse-window
                                display-buffer-reuse-mode-window
                                ,(when bottom 'display-buffer-at-bottom)
                                display-buffer-use-some-frame
                                display-buffer-pop-up-window
                                display-buffer-use-some-window))

                   (frame-predicate . wal-display-buffer-use-some-frame--with-display-p)
                   (inhibit-switch-frame . t)

                   ,@(wal-display-buffer--actions width height dedicated no-other)))))

(defalias 'wdb-nearby 'wal-display-buffer-same-place-or-nearby)
(defalias 'wdb-faraway 'wal-display-buffer-same-place-or-faraway)

(defun wal-kill-some-file-buffers ()
  "Kill some buffers associated with files."
  (interactive)

  (let ((file-buffers (seq-filter #'buffer-file-name (buffer-list))))

    (kill-some-buffers file-buffers)))

(defun wal-switch-to-buffer-obeying-display-actions (buffer-or-name &optional norecord)
  "Switch to BUFFER-OR-NAME obeying display actions.

Passes NORECORD flag to `switch-to-buffer'."
  (let ((switch-to-buffer-obey-display-actions t))

    (switch-to-buffer buffer-or-name norecord)))

(defun wal-switch-to-other-buffer ()
  "Switch to the other buffer.

This switch is not recorded."
  (interactive)

  (switch-to-buffer nil t))

(defun wal-interesting-windows ()
  "A list of interesting windows.

This is a simplified `aw-window-list'."
  (cl-remove-if

   (lambda (window)
     (let ((frame (window-frame window)))
       (or (not (and (frame-live-p frame)
                     (frame-visible-p frame)))
           (string= "initial_terminal" (terminal-name frame))
           (and (fboundp 'frame-parent) (frame-parent (window-frame window))))))

   (cl-mapcan #'window-list (frame-list))))
#+END_SRC

* Editing

More convenient editing.

#+BEGIN_SRC emacs-lisp
(defun wal-kill-ring-save-whole-buffer ()
  "Call `kill-ring-save' on the entire buffer."
  (interactive)

  (kill-ring-save (point-min) (point-max)))

(defconst wal-cursor-types '(box hollow bar hbar)
  "Cursor types that can be set using `completing-read'.")

(defun wal-set-cursor-type (&optional reset)
  "Set the `cursor-type'.

Optionally RESET the type when called with `universal-argument'."
  (interactive "P")

  (if reset
      (setq-local cursor-type t)
    (let* ((type-string (completing-read "Select cursor type: " wal-cursor-types))
           (type (intern type-string)))

      (setq-local cursor-type type))))

(defun wal-kwim (&optional arg)
  "Kill what I mean.

If there's an active region, kill it.

If we're at the (actual) end or (actual) beginning of a line,
kill the whole line, otherwise kill forward.

If a whole line is killed, move to the beginning of text on the
next line.

ARG is passed to `kill-line' and function `kill-whole-line'."
  (interactive "P")

  (if (region-active-p)
      (kill-region nil nil t)
    (let ((p-before (point))
          (p-end nil)
          (p-beg nil))

      (save-excursion
        (end-of-line)
        (setq p-end (point))

        (beginning-of-line)
        (setq p-beg (point)))

      (if (and (/= p-before p-beg) (/= p-before p-end))
          (kill-line arg)
        (kill-whole-line arg)
        (beginning-of-line-text)))))

(defun wal-mwim-beginning (arg)
  "Call `move-beginning-of-line' with ARG.

If we're already at the beginning, move to the beginning of the
line text."
  (interactive "P")

  (let ((p-before (point))
        (p-after nil))

    (move-beginning-of-line arg)

    (setq p-after (point))

    (when (= p-before p-after)
      (beginning-of-line-text))))

(defun wal-spill-paragraph (&optional region)
  "Fit the paragraph on a single line.

Apply to REGION if t."
  (interactive "P")

  (let ((fill-column most-positive-fixnum))

    (funcall-interactively 'fill-paragraph nil region)))
#+END_SRC

* Garbage Collection

#+BEGIN_SRC emacs-lisp
(defun wal-increase-gc-cons-threshold ()
  "Increase `gc-cons-threshold' to 100 MB.

Should be used when setting up minibuffer."
  (setq gc-cons-threshold (wal-bytes-per-mb 100)))
#+END_SRC

* Windows

#+BEGIN_SRC emacs-lisp
(defun wal-l ()
  "Dedicate the window to the current buffer.

Un-dedicates if already dedicated."
  (interactive)

  (let ((dedicated (window-dedicated-p)))

    (message "Window %s dedicated to buffer" (if dedicated "no longer" "now"))
    (set-window-dedicated-p (selected-window) (not dedicated))))

(defun wal-force-delete-other-windows ()
  "Call `delete-other-windows' ignoring window parameters."
  (interactive)

  (defvar ignore-window-parameters)
  (let ((ignore-window-parameters t))

    (delete-other-windows)))

(defvar wal-supernova--markers '("\\`\\*" "\\` " "magit")
  "Markers used to find target buffers.")

(defun wal-supernova--matches (buffer)
  "Check if BUFFER matches a marker."
  (let* ((reg (mapconcat (lambda (it) (concat "\\(?:" it "\\)")) wal-supernova--markers "\\|")))

    (string-match-p reg (buffer-name buffer))))

(defun wal-supernova--target-exists-p ()
  "Check if any target exists."
  (let ((buffers (mapcar #'window-buffer (window-list-1))))

    (seq-find #'wal-supernova--matches buffers)))

(defun wal-supernova (&optional single-burst)
  "Quit windows with star buffers.

If optional SINGLE-BURST  is t, this only quits star buffers currently
visible. Otherwise star buffers are closed until none are left."
  (interactive "P")

  (let ((loop 0))

    (while (or (and (not single-burst)
                    (wal-supernova--target-exists-p))
               (> 1 loop))

      (dolist (window (window-list-1))
        (when (wal-supernova--matches (window-buffer window))
          (quit-window nil window)))

      (setq loop (1+ loop)))))

(defun wal-doppelganger (&optional close)
  "Create a doppelganger of the current buffer.

This calls `clone-indirect-buffer-other-window' unless this
buffer already has a clone.

If optional CLOSE is passed, close the doppelganger."
  (interactive "P")

  (let* ((name (buffer-name))
         (clone-name (format "%s<doppelganger>" name)))

    (if-let* ((existing (get-buffer clone-name)))

        (if close
            (quit-window nil (get-buffer-window existing))
          (display-buffer existing 'display-buffer-pop-up-window))

      (unless close
        (with-current-buffer (clone-indirect-buffer clone-name nil t)

          (read-only-mode)

          (display-buffer (current-buffer) 'display-buffer-pop-up-window))))))

(defun wal-swipe-window-prefix ()
  "Display the buffer of the next command to the left.

This will first delete other windows and then open the new window
to the left of the current one.

This is based on `other-window-prefix'."
  (interactive)

  (display-buffer-override-next-command
   (lambda (buffer alist)
     (delete-other-windows)

     (let ((alist (append '((inhibit-same-window . t)
                            (direction . left))
                          alist))
           window type)
       (if (setq window (display-buffer-in-direction buffer alist))
           (setq type 'window)
         (setq window (display-buffer-use-some-window buffer alist)
               type 'reuse))
       (cons window type)))
   nil "[other-window]")

  (message "Will swipe window after next command"))

(defmacro wal-with-scrolling-window (&rest body)
  "Execute BODY within the scrolling window."
  (declare (indent defun))
  `(progn
     (when (one-window-p)
       (user-error "No scrolling window"))

     (with-selected-window (other-window-for-scrolling)
       ,@body)))

(defun wal-isearch-other-window (&optional regexp)
  "Search the other window.

After the search was performed the window is re-centered.

Search using regular expression if REGEXP is t.

After the search the previous window is selected."
  (interactive "P")

  (wal-with-scrolling-window
    (isearch-forward regexp)
    (recenter-top-bottom))

  (previous-window))

(defun wal-other-window-mru ()
  "Select the most recently used window on this frame."
  (interactive)

  (when-let ((mru-window (get-mru-window nil nil t)))

    (select-window mru-window)))

(defun wal-other-window ()
  "Select the mru window or switch buffers."
  (interactive)

  (if (one-window-p)
      (wal-switch-to-other-buffer)
    (wal-other-window-mru)))

(defun wal-other-window-for-scrolling ()
  "Get the default window to scroll."
  (or (get-mru-window nil nil t)
      (next-window)
      (next-window nil nil 'visible)))
#+END_SRC

* Files

Handling of files.

#+BEGIN_SRC emacs-lisp
(defun wal-find-custom-file ()
  "Find the custom file."
  (interactive)

  (switch-to-buffer (find-file-noselect (file-truename custom-file))))

(defun wal-find-init ()
  "Find and switch to the `user-init-file'."
  (interactive)

  (switch-to-buffer (find-file-noselect (file-truename user-init-file))))

(defconst wal-fish-config-locations '("~/.config/fish/config.fish"
                                      "~/.config/omf"))

(defun wal-find-fish-config ()
  "Find the fish shell config file."
  (interactive)

  (let* ((files wal-fish-config-locations)
         (init-file (cl-find-if
                     'file-exists-p
                     (mapcar 'expand-file-name files))))

    (if init-file
        (switch-to-buffer (find-file-noselect (file-truename init-file)))
      (user-error "Couldn't find fish config file"))))
#+END_SRC

* Command Line

Capture custom command line flags.

#+BEGIN_SRC emacs-lisp
(defvar wal-flag-doctor nil)
(defvar wal-flag-mini nil)
(defvar wal-flag-ensure nil)

(defconst wal-custom-flags '((doctor . "--doctor")
                             (mini . "--mini")
                             (ensure . "--ensure"))
  "Alist of custom flags that can be passed to Emacs.")

(defmacro wal-capture-flag (flag docs)
  "Check for custom FLAG.

DOCS will be passed on to `message'.

This will delete the flag from the command line arguments and set
the associated variable."
  (declare (indent defun) (doc-string 2))

  `(when-let* ((flags wal-custom-flags)
               (dash-flag (cdr (assoc ',flag flags)))
               (found (member dash-flag command-line-args)))

     (message ,docs)

     (setq command-line-args (delete dash-flag command-line-args))
     (setq ,(intern (concat "wal-flag-" (symbol-name flag))) t)))
#+END_SRC

* Lists

Manipulating lists.

#+BEGIN_SRC emacs-lisp
(defun wal-append (target seq)
  "Set TARGET to it with SEQ appended.

Duplicate items are removed."
  (let ((val (symbol-value target)))

    (set target (delq nil (delete-dups (append val seq))))))

(defun wal-replace-in-alist (target values)
  "Edit TARGET alist in-place using VALUES."
  (let ((val (symbol-value target)))

    (unless (seq-every-p (lambda (it) (assoc (car it) val)) values)
      (user-error "All keys %s must already be present in %s" (mapcar #'car values) target))

    (seq-each (lambda (it) (map-put! val (car it) (cdr it))) values)))

(cl-defun wal-insert (target point item &key allow-duplicates before quiet)
  "Insert ITEM in TARGET after POINT.

Unless ALLOW-DUPLICATES is t, trying to re-add an existing item will
raise an error unless QUIET is t.

If BEFORE is t, insert item before POINT."
  (let ((val (symbol-value target))
        (verb (if before "before" "after")))

    (if (and (memq item val) (not allow-duplicates))
        (unless quiet
          (user-error (concat "Can't insert " verb " %s: %s is already in target %s") point item target))

      (if (memq point val)
          (let* ((pos (cl-position point val))
                 (padded (if before (cons nil val) val))
                 (remainder (nthcdr pos padded)))

            (setcdr remainder (cons item (cdr remainder)))
            (if before
                (set target (cdr padded))
              padded))
        (unless quiet
          (user-error (concat "Can't insert " verb " %s as it is not in %s") point target))))))

(defun wal-list-from (target item)
  "Create a list from TARGET appending ITEM.

If TARGET already is a list ITEM is appended. Duplicates are
removed."
  (let ((val (symbol-value target)))

    (cond
     ((listp val)
      (delq nil (delete-dups (append val `(,item)))))
     (t
      (list val item)))))

(defun wal-plist-keys (plist)
  "Get all keys from PLIST."
  (unless (plistp plist)
    (user-error "Not a plist"))

  (let ((elements plist)
        (keys nil))

    (while elements
      (push (car elements) keys)
      (setq elements (cddr elements)))

    (reverse keys)))
#+END_SRC

* Scratch Buffer

Make the scratch buffer contents persist between sessions.

#+BEGIN_SRC emacs-lisp
(defun wal-scratch-buffer--prep (buffer)
  "Prep scratch buffer BUFFER."
  (with-current-buffer buffer
    (when initial-scratch-message
      (insert initial-scratch-message)
      (set-buffer-modified-p nil))
    (funcall initial-major-mode))

  buffer)

(defun wal-scratch-buffer (&optional session)
  "Switch to the scratch buffer.

If SESSION is non-nil, switch to (or create) it."
  (interactive "P")

  (let* ((name "*scratch*")
         (buf (cond ((numberp session)
                     (if-let* ((session-name (format "%s<%d>" name session))
                               (buffer (get-buffer session-name)))
                         buffer
                       (wal-scratch-buffer--prep (get-buffer-create session-name))))
                    (session
                     (wal-scratch-buffer--prep (generate-new-buffer name)))
                    (t
                     (if-let ((buffer (get-buffer name)))
                         buffer
                       (wal-scratch-buffer--prep (get-buffer-create name)))))))

    (pop-to-buffer buf '(display-buffer-same-window))))

(defvar wal-scratch-persist--marker "wal-emacs")
(defvar wal-scratch-persist--rehydrated nil)

(defun wal-scratch-persist--buffer-string (buffer)
  "Get the content from BUFFER.

This filters out lines that start with a comment."
  (let* ((string (with-current-buffer buffer
                   (substring-no-properties (buffer-string))))
         (lines (split-string string "\n"))
         (filter (lambda (it) (not (string-match-p wal-scratch-persist--marker it)))))

    (string-join (seq-filter filter lines) "\n")))

(defun wal-persist-scratch ()
  "Persist content of all *scratch* buffers.

The contents are stored in `wal-scratch-persist-file' if non-nil. The
order of buffers is not persisted."
  (interactive)

  (when wal-scratch-persist-file

    (unless (file-exists-p wal-scratch-persist-file)
      (make-empty-file wal-scratch-persist-file t))

    ;; It's possible that we never rehydated. In order to not lose
    ;; anything, we rehydrate here instead.
    (unless wal-scratch-persist--rehydrated
      (wal-rehydrate-scratch))

    (with-temp-buffer
      (thread-last
        (buffer-list)
        (seq-filter (lambda (it) (string-match-p "\\*scratch" (buffer-name it))))
        (reverse)
        (apply (lambda (&rest seq) (mapconcat #'wal-scratch-persist--buffer-string seq "\n\n")))
        (string-trim)
        (insert))

      (write-region (point-min) (point-max) wal-scratch-persist-file))))

(defun wal-rehydrate-scratch ()
  "Re-hydrate scratch buffer (if persisted).

This overrides the scratch buffer with the content stored in
`wal-scratch-persist' if non-nil."
  (interactive)

  (when (and (not wal-scratch-persist--rehydrated)
             (file-exists-p wal-scratch-persist-file))

    (setq wal-scratch-persist--rehydrated t)

    (with-current-buffer (get-buffer "*scratch*")
      (goto-char (point-max))
      (insert-file-contents wal-scratch-persist-file)

      (set-buffer-modified-p nil))))
#+END_SRC

* Helpers

Some more helper functions.

#+BEGIN_SRC emacs-lisp
(defun wal-biased-random (limit &optional bias-low throws)
  "Return a biased random number using LIMIT.

The bias is the high end unless BIAS-LOW is passed. The number of
throws are 3 or THROWS."
  (let ((results (list))
        (throws (or throws 3)))

    (dotimes (_i throws)
      (push (random limit) results))

    (if bias-low
        (seq-min results)
      (seq-max results))))

(defun wal-bytes-per-mb (num)
  "Return the integer value of NUM megabytes in bytes.

This function may be used to set variables that expect bytes."
  (floor (* 1024 1024 num)))

(defun wal-truncate (text &optional max-len)
  "Truncate TEXT if longer than MAX-LEN.

Truncates to 8 characters if no MAX-LEN is provided."
  (let ((len (or max-len 8)))

    (if (> (length text) len)
        (concat (substring text 0 (max (- len 3) 1)) "...")
      text)))

(defun wal-univ-p ()
  "Check if the `current-prefix-arg' is the `universal-argument'.

This is mainly useful for non-interactive functions."
  (equal current-prefix-arg '(4)))

(defmacro wal-try (package &rest body)
  "Exceute BODY if PACKAGE can be required."
  (declare (indent 1))

  `(when (require ',package nil :no-error) ,@body))

(defun wal-server-edit-p ()
  "Check if we're (likely) editing from outside of Emacs.

We also make sure we're not in `with-editor-mode' as to not to
intefere with `magit' and friends."
  (and (bound-and-true-p server-buffer-clients)
       (not (bound-and-true-p with-editor-mode))))

(defun wal-dead-shell-p ()
  "Check if the current buffer is a shell or comint buffer with no process."
  (let ((buffer (current-buffer)))

    (with-current-buffer buffer
      (and (derived-mode-p 'comint-mode)
           (not (comint-check-proc buffer))))))

(defmacro wal-on-boot (name &rest body)
  "Only expand BODY in NAME on boot."
  (declare (indent defun))

  (if (bound-and-true-p wal-booting)
      `(progn ,@body)
    `(message "Ignoring statements in '%s'" ',name)))

(defvar wal-transient-may-redefine nil)

(defmacro wal-transient-define-major (name arglist &rest args)
  "Make sure that prefix NAME called with ARGLIST and ARGS is only defined once."
  (declare (debug (&define name lambda-list
                           [&optional lambda-doc]
                           [&rest keywordp sexp]
                           [&rest vectorp]
                           [&optional ("interactive" interactive) def-body]))
           (indent defun)
           (doc-string 3))

  (let ((composite-name (intern (concat (symbol-name name) "-major"))))

    (unless (and (fboundp composite-name) (not wal-transient-may-redefine))
      `(transient-define-prefix ,composite-name ,arglist ,@args))))

(defmacro setq-unless (&rest pairs)
  "Set variable/value PAIRS if they're currently nil."
  (declare (debug setq))

  (let ((exps nil))

    (while pairs
      (let ((sym (car pairs)))

        (if (and (boundp sym) (symbol-value sym))
            (progn
              (pop pairs)
              (pop pairs))
          (push `(setq ,(pop pairs) ,(pop pairs)) exps))))
    `(progn . ,(nreverse exps))))

(defun wal-symbol-bounds ()
  "Get the bounds of the symbol at point."
  (and (thing-at-point 'symbol t)
       (not (thing-at-point 'number t))
       (bounds-of-thing-at-point 'symbol)))
#+END_SRC

* Setup

Allow differentiating between initial and repeated setups.

#+BEGIN_SRC emacs-lisp
(defmacro wal-when-ready (&rest body)
  "Execute BODY when Emacs is ready."
  (if (daemonp)
      `(add-hook 'server-after-make-frame-hook (lambda () ,@body))
    `(add-hook 'emacs-startup-hook (lambda () ,@body))))

(defvar wal-performed-setups '()
  "List of already performed setups.")

(cl-defmacro wal-define-init-setup (name docs &key initial always immediately)
  "Define an initial setup for NAME documented by DOCS.

The INITIAL setup is only run once. The ALWAYS one on every call.

In daemon-mode the function may be called IMMEDIATELY. An
appropriate hook is chosen for the original call."
  (declare (indent defun) (doc-string 2))

  (let ((func-name (intern (concat "wal-init-setup-" (symbol-name name)))))

    `(wal-on-boot ,name
       (defun ,func-name ()
         ,(format "Do base setup for %s. Do minimal setup on repeats.\n%s" name docs)
         (unless (memq ',name wal-performed-setups)
           (progn
             (message "Initial setup of '%s'" ,(symbol-name name))
             ,@initial
             (add-to-list 'wal-performed-setups ',name)))
         ,@always)
       (if (daemonp)
           (progn
             (when ,immediately
               (funcall ',func-name))
             (add-hook 'server-after-make-frame-hook #',func-name))
         (add-hook 'emacs-startup-hook #',func-name)))))
#+END_SRC

* Regions

Act on regions.

#+BEGIN_SRC emacs-lisp
(defun wal-duck-duck-go-region ()
  "Query duckduckgo with active region."
  (interactive)

  (if mark-active
      (let* ((beg (region-beginning))
             (end (region-end))
             (str (buffer-substring-no-properties beg end))
             (hex-str (url-hexify-string str)))

        (browse-url
         (concat "https://duckduckgo.com/html/?q=" hex-str)))
    (user-error "No active region")))
#+END_SRC

* Additional Mode Controls

Turning on/off certain major modes switching between =major-mode= and =fundamental-mode=.

#+BEGIN_SRC emacs-lisp
(defvar-local wal-before-fundamental-mode nil
  "The major mode before fundamental was engaged.")

(defun wal-fundamental-mode ()
  "Switch from `major-mode' to `fundamental-mode' and back."
  (interactive)

  (let ((m-mode major-mode))

    (if wal-before-fundamental-mode
        (progn
          (funcall wal-before-fundamental-mode)
          (setq-local wal-before-fundamental-mode nil))
      (fundamental-mode)
      (setq-local wal-before-fundamental-mode m-mode))))
#+END_SRC

* Advice

#+begin_src emacs-lisp
(defun wal-advise-many (advice combinator advised)
  "Advise ADVISED using ADVICE and COMBINATOR."
  (mapc (lambda (it) (advice-add it combinator advice)) advised))
#+end_src

* Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-useful)

;;; wal-useful.el ends here
#+END_SRC

* Footnotes

[fn:1] Alternate spelling is "expansion pak".
