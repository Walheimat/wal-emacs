* Style Guide

To increase readability, I'll try to unify how things are generally
structured.

** =use-package=

*** Keyword Order

The order is:

1. Conditional
   1. =if=
   2. =wal-ways=
2. Configuration
   1. =init=
   2. =config=
3. Bindings
   1. =bind-keymap=
   2. =bind=
   3. =wal-bind=
   4. =general=
4. Loader order
   1. =mode=
   2. =hook=
   3. =defer= or =demand=
   4. =after=
   5. =commands=
5. Ensuring
   1. =ensure=
   2. =ensure-system-package=
   3. =load-path=
6. Delighting/Diminishing
   1. =delight=
   2. =diminish=

**** =:general= Keyword

The definer calls should be in the order of the ranks, default before
=sink=:

1. =general=
2. =colonel=
3. =major=
4. =captain=
5. =lieutenant=
6. =sergeant=

*** Single Line vs. Body

Singe lines make sense for =defer=, =after=, =ensure= and =hook= (if there's just one).

** Prefixing

A letter may prefix an action or a nested keymap.

** Commits

Commits are linted using =commitlint=. To set this up, load file
=setup/wal-setup.el= and select =commit hooks=.

The rules are defined in =commitlint.config.js= and a description of all
rules can be found [[https://commitlint.js.org/#/reference-rules][here]].

** Order of Declarations

Each major section has a header block that contains the following in
the following order:

+ =declare-function= and empty =defvar=
+ =defgroup=
+ =defcustom=

The order of declarations in subsections is:

+ =defvar=
+ =defconst=
+ =defmacro=
+ =define-minor-mode=
+ =defun=
+ =defalias=
+ =use-package=
+ other function calls

** Variable Definition

Definition should be on first line unless the variable is a list or a
s-expression that goes beyond a function call.

#+BEGIN_SRC emacs-lisp :tangle no
(defcustom some-variable "value"
  "Doc string."
  :type 'string
  :group 'some-group)


(defvar func-variable (expand-file-name "hello" "~")
  "Doc string.")

(defcustom some-list-variable
  '(a
    list
    of
    items)
  "Doc string."
  :type '(repeat symbol)
  :group 'some-group)

(defconst sexp-variable
  (let ((var "hello"))
    var)
  "Doc string.")
#+END_SRC

** Advice

Advice functions using =:around= should follow template
=wal/with-<what-it-does>=.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/with-big-vertico (fun &rest args)
  "Call FUN with ARGS but increase the `vertico-count'."
  (defvar vertico-count)
  (let ((vertico-count 20))
    (apply fun args)))

(advice-add 'consult-ripgrep :around #'wal/with-big-vertico)
#+END_SRC

Advice functions using =:override= should follow template
=wal/instead-<what-it-does>=.
