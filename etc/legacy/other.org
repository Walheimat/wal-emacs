#+TITLE: Legacy Configurations
#+AUTHOR: @Walheimat

Everything defined using =:tangle no= which would need to be removed for
blocks one wants to tangle from this file.

* Package Configurations

This is a list of packages I no longer use but I have configured in
the past.

Some might still prove useful at some point.

** blacken

Reformat buffer using =black=. Using the formatter provided by LSP is
probably better.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package blacken
  :general
  (wal/major :keymaps 'python-mode-map
    "b" '(blacken-buffer :wk "blacken buffer")))
#+END_SRC

** angular-mode

You might think Angular is dead and you'd be right but not everyone
knows yet.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package angular-mode
  :defer t
  :config
  ;; I use nvm and I assume the language server is installed.
  (let* ((node-v (string-trim (substring (shell-command-to-string "node -v") 1)))
         (node-m (format ".config/nvm/%s/lib/node_modules" node-v))
         (node-abs (expand-file-name node-m "~"))
         (lang-serv (expand-file-name "@angular/language-server" node-abs)))
    (when (f-directory? lang-serv)
      (setq lsp-clients-angular-server-command
            `("node"
              ,lang-serv
              "--ngProbeLocations"
              ,node-abs
              "--tsProbeLocations"
              ,node-abs
              "--stdio")))))
#+END_SRC

** window-purpose

Give your windows purpose. This does not seem to respect changes made
to =display-buffer-alist= unfortunately.

#+BEGIN_SRC emacs-lisp :tangle no
(defvar wal/mode-purpose-terminal
  '(vterm-mode)
  "`terminal' purpose defined by mode.")

(defvar wal/regexp-purpose-result
  '("\\*HTTP Response\\*")
  "`result' purpose defined by regexp.")

(defvar wal/mode-purpose-prompt
  '(docker-container-mode)
  "`prompt' purpose defined by mode.")

(defun wal/configure-purposes()
  "Configure purposes."
  (setq purpose-user-mode-purposes nil)
  ;; `terminal' purpose.
  (--each
      wal/mode-purpose-terminal
    (add-to-list 'purpose-user-mode-purposes
                 `(,it . terminal)))
  ;; `result' purpose.
  (--each
      wal/regexp-purpose-result
    (add-to-list 'purpose-user-regexp-purposes
                 `(,it . result)))
  ;; `prompt' purpose.
  (--each
      wal/mode-purpose-prompt
    (add-to-list 'purpose-user-mode-purposes
                 `(,it . prompt)))
  (purpose-compile-user-configuration))

(use-package window-purpose
  :custom
  (default-purpose 'none)
  (default-file-purpose 'write)
  (purpose-display-fallback nil)
  :config
  (define-key purpose-mode-map (kbd "C-x b") nil) ; Just don't!
  ;; Require additional packages.
  (require 'window-purpose-x)
  (purpose-x-persp-setup)
  (purpose-x-kill-setup)
  ;; Configure.
  (wal/configure-purposes)
  :general
  (wal/colonel "p" '(purpose-mode :wk "purpose")))
#+END_SRC

** symon

Show some system stats when nothing else is going on.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package symon
  :defer 6
  :if (and (eq system-type 'gnu/linux)
           ;; This package doesn't seem to work with `native-comp'.
           (not (fboundp 'native-comp-available-p)))
  :custom
  (symon-sparkline-type 'bounded)
  (symon-delay 10)
  (symon-monitors '(symon-linux-cpu-monitor
                    symon-linux-memory-monitor
                    symon-linux-network-rx-monitor
                    symon-linux-network-tx-monitor))
  :config
  (symon-mode))
#+END_SRC

** company-prescient

#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-prescient
  :if wal/use-prescient
  :after (company prescient)
  :config
  (company-prescient-mode +1))
#+END_SRC

** find-file-in-project

Finding files by name should be easy.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package find-file-in-project
  :defer 2)
#+END_SRC

** ansi-term

Sometimes you need an =ansi= terminal.
Is that true?

#+BEGIN_SRC emacs-lisp :tangle no
(use-package term
  :ensure nil)
#+END_SRC

** smooth-scrolling

Smooth scrolling at the margins using =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package smooth-scrolling
  :defer 3.5
  :custom
  (smooth-scroll-margin 4)
  :config
  (smooth-scrolling-mode 1))
#+END_SRC

** evil-nerd-commenter

Comment code like in =vim=, evil, evil =vim=.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package evil-nerd-commenter
  :bind
  (:map prog-mode-map
   ("H-c" . evilnc-comment-or-uncomment-lines)))
#+END_SRC

** undo-fu

Undoing un-undoing is weird in Emacs.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package undo-fu
  :bind (("C-/" . undo-fu-only-undo)
         ("C-?" . undo-fu-only-redo)))
#+END_SRC

** smartparens

I still use this package, but not its mode.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package smartparens
  :config
  ;; Only require configs that I want.
  (require 'smartparens-python)
  (add-to-list 'sp-lisp-modes 'lisp-data-mode)
  (sp-with-modes sp-lisp-modes
    ;; disable ', it's the quote character!
    (sp-local-pair "'" nil :actions nil))
  :general
  (wal/captain :keymaps 'prog-mode
    "p" '(:ignore t :wk "smartparens")
    "pr" '(sp-rewrap-sexp :wk "rewrap")
    "pk" '(sp-kill-sexp :wk "kill")
    "pf" '(sp-forward-sexp :wk "forward")
    "pb" '(sp-backward-sexp :wk "backward")))
#+END_SRC

** vdiff-magit

I find =ediff= quite cumbersome, so I'm giving =vdiff= a try.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package vdiff-magit
  :after magit
  :demand
  :custom
  (vdiff-diff-algorithm 'git-diff)
  (vdiff-magit-stage-is-2way t)
  :config
  ;; `:bind-keymap' doesn't seem to allow mode predicates.
  (define-key vdiff-mode-map (kbd "C-c v") vdiff-mode-prefix-map)
  ;; Add to `magit' dispatch.
  (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
  (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
  (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
  (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)
  :bind
  (:map vdiff-mode-map
   ("q" . vdiff-quit)
   ("h" . vdiff-hydra/body)
   :map magit-mode-map
   ("e" . vdiff-magit-dwim)
   ("E" . vdiff-magit)))
#+END_SRC

** magit-todos

#+BEGIN_SRC emacs-lisp :tangle no
(use-package magit-todos
  :after magit
  :custom
  (magit-todos-branch-list nil)
  :bind
  (:map magit-mode-map
   ("," . ivy-magit-todos)
   ("." . magit-todos-list)))
#+END_SRC

** lua-mode

Why not. It can be /awesome/.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package lua-mode
  :defer t)
#+END_SRC

** haskell-mode

Don't use Haskell much yet.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package haskell-mode
  :defer t)
#+END_SRC

** flyspell-correct

The built-in solutions are good enough.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package flyspell-correct
  :after flyspell
  :bind
  (:map flyspell-mode-map
   ("C-/" . flyspell-correct-at-point)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+END_SRC

** nginx-mode

Make nginx configuration files look pretty.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package nginx-mode
  :defer t
  :config
  (add-to-list 'auto-mode-alist
               '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode)))
#+END_SRC

** csharp-mode

Unity.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/csharp-mode ()
  "Hook into `csharp-mode'."
  (message "Ouch!")
  (wal/disable-tabs)
  ;; If you're using `lsp-mode' you can run `lsp-install-server'.
  (wal/lsp))

(use-package csharp-mode
  :mode "\\.cs\\'"
  :hook (csharp-mode . wal/csharp-mode))
#+END_SRC

** page-break-lines

Former dependency of =dashboard=.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package page-break-lines
  :defer t
  :custom
  (page-break-lines-lighter " pbl"))
#+END_SRC

** mood-line

The light-weight variant.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package mood-line
  :config
  (mood-line-mode))
#+END_SRC

** selectrum

Use =selectrum= for =consult=.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/advise-selectrum(fun &rest r)
  "Call FUN using `selectrum' for read completion, applying R."
  (let ((completing-read-function #'selectrum-completing-read)
        (read-buffer-function #'selectrum-read-buffer)
        (read-file-name-function #'selectrum-read-file-name)
        (completion-in-region-function #'selectrum-completion-in-region)
        (coompleting-read-multiple #'selectrum-completing-read-multiple)
        (read-libary-name #'selectrum-read-library-name)
        (completion-styles '(substring partial-completion))
        ;; Cannot advise `dired-read-dir-and-switches' and `minibuffer-message'.
        (map (make-sparse-keymap)))
    (set-keymap-parent map minibuffer-local-map)
    (define-key map [remap previous-matching-history-element] 'selectrum-select-from-history)
    (apply fun r)))

(use-package selectrum)
#+END_SRC

** hungry-delete

I know you're hiding that sweet, sweet whitespace in that basket,
Little Red Riding Hood!

#+BEGIN_SRC emacs-lisp :tangle no
(use-package hungry-delete
  :custom
  (hungry-delete-join-reluctantly t)
  :general
  (wal/colonel
    "k" '(hungry-delete-forward :wk "hungry forward")
    "K" '(hungry-delete-backward :wk "hungry backward"))
  (wal/captain-sink :keymaps 'prog-mode-map
    "h" '(hungry-delete-mode :wk "hungry-delete"))
  :delight " hun")
#+END_SRC

** ag

 And the =ag= one from [[https://github.com/ggreer/the_silver_searcher#installation][here]][fn:15].

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/ag-ignored (string)
  "Search project for STRING including VCS ignored files."
  (interactive (list (ag/read-from-minibuffer "Search string")))
  (let ((ag-arguments (append ag-arguments '("--skip-vcs-ignores"))))
    (ag/search string (ag/project-root default-directory))))

(defun wal/configure-ag ()
  "Configure package `ag'."
  (wal/display-buffer-in-pop-up "^\\*ag")
  (defhydra wal/ag (:hint nil)
    "
%s`wal/ascii-whale Silver-search: _n_ormal, in _p_roject, by _f_ile type.'
"
    ("n" ag :color blue)
    ("p" ag-project :color blue)
    ("f" ag-files :color blue)
    ("i" wal/ag-ignored :color blue)))

(use-package ag
  :if (eq wal/find-provider 'ag)
  :config
  (wal/configure-ag)
  :custom
  (ag-highlight-search t)
  (ag-reuse-buffers t)
  ;; Include hidden files. We ignore only specific dirs.
  (ag-arguments '("--smart-case" "--stats" "--hidden"))
  (ag-ignore-list '(".git"
                    ".idea"
                    ".ccls-cache"
                    ".vscode"
                    "node_modules"
                    "coverage"
                    "deps"
                    "dist"
                    "build"
                    "*.svg"
                    ".log"
                    "*.min.js"
                    "*.js.map"))
  (ag-project-root-function #'projectile-acquire-root)
  :wal-bind
  ("n" . wal/ag/body)
  :commands (ag/read-from-minibuffer)
  :ensure-system-package ag)
#+END_SRC

** restclient

Postman is passé. I use a =.http= file extension for my request
examples.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package restclient
  :config
  (wal/display-buffer-in-pop-up "\\*HTTP Response\\*")
  :mode ("\\.http\\'" . restclient-mode))

;; We use this for hooks.
(use-package jq-mode
  :demand
  :after restclient
  :ensure-system-package jq)

;; You will need to clone restclient repo.
(use-package restclient-jq
  :config
  (require 'cl nil t)
  :load-path "site-lisp")
#+END_SRC

** scroll-on-jump

Scroll pixel-wise on certain jump commands.

#+BEGIN_SRC emacs-lisp :tangle no
(defcustom smooth-scroll-mode--commands
  '(scroll-up-command
    scroll-down-command
    recenter-top-bottom)
  "Commands that should use smooth scrolling."
  :type '(repeat symbol)
  :group 'wal-visuals)

(defun smooth-scroll-mode--enable ()
  "Enable smooth scrolling."
  (mapc (lambda (it)
          (eval `(scroll-on-jump-with-scroll-advice-add ,it)))
        smooth-scroll-mode--commands))

(defun smooth-scroll-mode--disable ()
  "Disable smooth-scrolling."
  (mapc (lambda (it)
          (eval `(scroll-on-jump-with-scroll-advice-remove ,it)))
        smooth-scroll-mode--commands))

(define-minor-mode smooth-scroll-mode
  "Use smooth scrolling."
  :init-value nil
  :global t
  :lighter " scr"
  (cond
   (noninteractive
    (setq smooth-scroll-mode nil))
   (smooth-scroll-mode
    (smooth-scroll-mode--enable))
   (t
    (smooth-scroll-mode--disable))))

(use-package scroll-on-jump)

(wal/captain-sink "," '(smooth-scroll-mode :wk "smooth-scroll"))
#+END_SRC

** humanoid-themes

Lastly there's this.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package humanoid-themes)
#+END_SRC

** tree-sitter

Provide alternative syntax highlighting.

#+begin_src emacs-lisp :tangle no
(defcustom wal/tree-sitter-mode-maps
  '(js2-mode-map
    python-mode-map
    c++-mode-map)
  "Mode maps that get `tree-sitter-hl-mode' bound."
  :type '(repeat symbol)
  :group 'wal-visuals)

(defun wal/tree-sitter-mode ()
  "(De-)Activate mode and highlighting."
  (interactive)
  (if (and (boundp 'tree-sitter-mode) tree-sitter-mode)
      (tree-sitter-mode -1)
    (tree-sitter-hl-mode)))

(use-package tree-sitter
  :general
  (wal/captain :keymaps wal/tree-sitter-mode-maps :major-modes t
    "t" '(wal/tree-sitter-mode :wk "treesitter"))
  :delight " trs")

(use-package tree-sitter-langs
  :demand
  :after tree-sitter)
#+end_src

** fira-code-mode

Alternatively, enable FiraCode ligatures for /all/ fonts.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/use-fira-code-mode ()
  "Determine whether `fira-code-mode' can/should be used.

This is the case when:

1. We can't use `ligature'
2. The symbol font is installed
3. We're not using Monoid font"
  (and (not (require 'ligature nil t))
       (x-list-fonts "Fira Code Symbol")
       (not (string-match "Monoid" (face-font 'default)))))

(defun wal/fira-code ()
  "Wraps macro to only maybe enable."
  (use-package fira-code-mode
    :if (wal/use-fira-code-mode)
    :custom
    (fira-code-mode-disabled-ligatures '("[]" "x"))
    :hook prog-mode
    :diminish))

;; We guard against font-related actions.
(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/fira-code t)
  (add-hook 'emacs-startup-hook 'wal/fira-code t))
#+END_SRC

** blamer

Per-line blaming.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package blamer
  :general
  (wal/captain-sink "b" '(blamer-mode :wk "blamer"))
  :load-path "site-lisp")
#+END_SRC

** smartparens

I didn't have smart parens growing up so I need help.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/configure-smartparens ()
  "Configure `smartparens'."
  (add-to-list 'sp-lisp-modes 'lisp-data-mode)
  (sp-with-modes
   sp-lisp-modes
   (sp-local-pair "'" nil :actions nil))
  ;; Create a `hydra' for pair navigation/editing.
  (defhydra wal/smartparens (:hint nil)
    "
%s(wal/ascii-whale-hydra-offset 7)^_p_^
%s`wal/ascii-whale Use _b_   _f_ to navigate pairs.
%s(wal/ascii-whale-hydra-offset 7)^_n_^
"
    ("b" sp-backward-sexp)
    ("f" sp-forward-sexp)
    ("p" sp-backward-up-sexp)
    ("n" sp-down-sexp)
    ("q" nil "quit")))

(defun wal/sp-rewrap-sexp ()
  "Call `sp--maybe-init' before `sp-rewrap-sexp'.

Advising the function does not work."
  (interactive)
  (unless (boundp 'smartparens)
    (require 'smartparens nil t))
  (with-current-buffer (current-buffer)
    (sp--maybe-init))
  (call-interactively 'sp-rewrap-sexp))

(use-package smartparens
  :config
  (wal/configure-smartparens)
  :general
  (wal/colonel :keymaps 'prog-mode-map
    "p" '(:ignore t :wk "smartparens")
    "ph" '(wal/smartparens/body :wk "hydra")
    "pw" '(wal/sp-rewrap-sexp :wk "rewrap")
    "ps" '(sp-splice-sexp :wk "splice")))
#+END_SRC

** company-box

#+begin_src emacs-lisp :tangle no
(use-package company-box
  :disabled
  :hook (company-mode . company-box-mode)
  :diminish)
#+end_src

** vterm-toggle

#+begin_src emacs-lisp :tangle no
(use-package vterm-toggle
  :custom
  (vterm-toggle-fullscreen-p nil)
  (vterm-toggle-scope 'project)
  :wal-bind
  ("\\" . vterm-toggle))
#+end_src

** crux

Let's use =crux= for some editing magic.

/Note/ I'm using a minimal configuration these days. Just keeping this
here for sentimental purposes.

#+BEGIN_SRC emacs-lisp :tangle no
;; FIXME: Adding these as recent commit broke these.

(defun wal/crux-duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (pcase-let* ((origin (point))
               (`(,beg . ,end) (crux-get-positions-of-line-or-region))
               (region (buffer-substring-no-properties beg end)))
    (dotimes (_i arg)
      (goto-char end)
      (newline)
      (insert region)
      (setq end (point)))
    (goto-char (+ origin (* (length region) arg) arg))))

(defun wal/crux-duplicate-and-comment-current-line-or-region (arg)
  "Duplicates and comments the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (pcase-let* ((origin (point))
               (`(,beg . ,end) (crux-get-positions-of-line-or-region))
               (region (buffer-substring-no-properties beg end)))
    (comment-or-uncomment-region beg end)
    (setq end (line-end-position))
    (dotimes (_ arg)
      (goto-char end)
      (newline)
      (insert region)
      (setq end (point)))
    (goto-char (+ origin (* (length region) arg) arg))))

(use-package crux
  :config
  (advice-add
   'crux-duplicate-current-line-or-region
   :override #'wal/crux-duplicate-current-line-or-region)
  (advice-add
   'crux-duplicate-and-comment-current-line-or-region
   :override #'wal/crux-duplicate-and-comment-current-line-or-region)
  :bind
  (("C-k" . crux-smart-kill-line)
   ("M-k" . crux-kill-line-backwards) ; Overrides `kill-sentence'.
   ("C-o" . delete-other-windows) ; Overrides `open-line'.
   ("M-o" . crux-other-window-or-switch-buffer))
  :general
  (wal/general
    "fs" '(crux-find-shell-init-file :wk "shell init")
    "fc" '(crux-find-user-custom-file :wk "custom file"))
  (wal/colonel
    "x" '(:ignore t :wk "crux")
    "xb" '(:ignore t :wk "buffers")
    "xbk" '(crux-kill-other-buffers :wk "kill other buffers")
    "xbd" '(crux-delete-buffer-and-file :wk "delete buffer and file")
    "xbr" '(crux-rename-file-and-buffer :wk "rename file and buffer")
    "xbs" '(crux-sudo-edit :wk "sudo edit")
    "xd" '(crux-duplicate-current-line-or-region :wk "duplicate"))
  (wal/colonel
    :keymaps '(prog-mode-map yaml-mode-map)
    "xD" '(crux-duplicate-and-comment-current-line-or-region :wk "duplicate and comment")
    "xl" '(crux-smart-open-line :wk "open line")
    "xL" '(crux-smart-open-line-above :wk "open line above"))
  :commands (crux-get-positions-of-line-or-region))
#+END_SRC

** undo-tree

Undo and redo with branching.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package undo-tree
  :wal-ways nil
  :custom
  (undo-tree-mode-lighter " udt")
  (undo-tree-auto-save-history nil)
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  :general
  (wal/captain-sink
    "u" '(undo-tree-mode :wk "undo tree"))
  (wal/captain :keymaps 'undo-tree-map
    "u" '(undo-tree-visualize :wk "undo tree"))
  :delight
  (undo-tree-visualizer-selection-mode " uds"))
#+END_SRC

** writeroom

Create a room of one's own.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package writeroom-mode
  :wal-ways nil
  :config
  (setq writeroom-global-effects (remove 'writeroom-set-alpha writeroom-global-effects)) ; Keep transparency.
  :custom
  (writeroom-width 0.618) ; Golden ratio.
  (writeroom-restore-window-config t)
  (writeroom-extra-line-spacing 0.1)
  :general
  (wal/captain-sink "r" '(writeroom-mode :wk "writeroom")))
#+END_SRC

** doom-modeline

Busier and prettier =modeline=.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/advise-doom-modeline-update-vcs-text (&rest _r)
  "Advise function to remove branch prefixes."
  (when doom-modeline--vcs-text
    (setq doom-modeline--vcs-text
          (replace-regexp-in-string
           "\\(feature\\|\\(\\w+\\)?fix\\|improvement\\)\\/"
           ""
           doom-modeline--vcs-text))))

(defun wal/doom-modeline-buffer-file-name-styles ()
  "Complete `doom-modeline' buffer file name styles."
  (completing-read
   "Select style: "
   '(truncate-upto-project
     truncate-upto-project
     truncate-from-project
     truncate-with-project
     truncate-except-project
     truncate-upto-root
     truncate-all
     truncate-nil
     relative-from-project
     relative-to-project
     file-name
     buffer-name)))

(defun wal/doom-modeline-switch-buffer-file-name-style (style)
  "Switch to `doom-modeline' buffer file name STYLE."
  (interactive (list (wal/doom-modeline-buffer-file-name-styles)))
  (let ((style-symbol (wal/maybe-intern style)))
    (setq doom-modeline-buffer-file-name-style style-symbol)))

(use-package doom-modeline
  :if (eq wal/mode-line 'doom-modeline)
  :wal-ways nil
  :config
  (advice-add
   'doom-modeline-update-vcs-text
   :after #'wal/advise-doom-modeline-update-vcs-text)
  (when (fboundp 'doom-modeline-update-vcs-text)
    (add-hook 'magit-post-refresh-hook #'doom-modeline-update-vcs-text))
  (doom-modeline-mode 1)
  :custom
  (doom-modeline-project-detection (if wal/use-projectile
                                       'projectile
                                     'project))
  (doom-modeline-minor-modes t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-icon t)
  (doom-modeline-vcs-max-length 25)
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  :custom-face
  (doom-modeline-debug-visual ((t (:inherit 'mode-line))))
  :demand)
#+END_SRC

** golden-ratio

Use the golden ratio.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/aw-switch-maybe-golden-ratio (_window)
  "Invoke `golden-ratio' if mode is active.
Used to advise `aw-switch-to-window'."
  (when (eq golden-ratio-mode t)
    (golden-ratio)))

(use-package golden-ratio
  :wal-ways nil
  :config
  ;; Make sure to run golden ratio after `aw-switch-to-window'.
  (advice-add
   'aw-switch-to-window
   :after #'wal/aw-switch-maybe-golden-ratio)
  (when wal/use-golden-ratio
    (golden-ratio-mode +1))
  :general
  (wal/captain-sink "g" '(golden-ratio-mode :wk "golden-ratio"))
  :delight " gol"
  :defer 2)
#+END_SRC

** company

In-line completion.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package company
  :if (eq wal/cap-provider 'company)
  :custom
  (company-show-quick-access 'left)
  (company-lighter-base "cmp")
  :wal-bind
  (:map company-mode-map
   ("<return>" . company-complete))
  :general
  (wal/captain-sink :keymaps '(prog-mode-map dap-ui-repl-mode-map)
    "c" '(company-mode :wk "company"))
  :hook (prog-mode . company-mode))
#+END_SRC

** highlight-indent-guides

Show indentation.

#+BEGIN_SRC emacs-lisp :tangle no
(defcustom wal/no-indent-guides '(dart-mode)
  "Programming modes that should not enable `highlight-indent-guides-mode'."
  :type '(repeat symbol)
  :group 'wal-visuals)

(defun wal/maybe-highlight-indent-guides ()
  "Maybe enable indent guides.

Only enables `highlight-indent-guides-mode' if the major mode is
not a member of `wal/no-indent-guides'."
  (unless (memq major-mode wal/no-indent-guides)
    ;; HACK: The library does not call this function when in daemon
    ;;       mode for whatever reason.
    (when (daemonp)
      (highlight-indent-guides-auto-set-faces))
    (highlight-indent-guides-mode +1)))

(use-package highlight-indent-guides
  :wal-ways nil
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  :general
  (wal/captain-sink :keymaps '(prog-mode-map yaml-mode-map)
    "i" '(highlight-indent-guides-mode :wk "h-indent"))
  :hook ((prog-mode yaml-mode) . wal/maybe-highlight-indent-guides)
  :delight " hig")
#+END_SRC

** org-alert

Show notifications for scheduled items and deadlines.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/advise-org-alert--check-time (time &optional against)
  "Check if TIME is in range of the cutoff.

The reference point is either current time or AGAINST.

Other than the library function, also make sure that the event
doesn't lie in the past."
  (let* ((time (mapcar #'string-to-number (split-string time ":")))
	     (comp (or against (decode-time (current-time))))
	     (now (org-alert--to-minute (decoded-time-hour comp) (decoded-time-minute comp)))
	     (then (org-alert--to-minute (car time) (cadr time)))
         (time-diff (- then now)))
    (and (> time-diff 0) (<= time-diff org-alert-notify-cutoff))))

(use-package org-alert
  :wal-ways nil
  :config
  (setq alert-default-style 'libnotify
        org-alert-notification-title "Org Alert"
        org-alert-time-match-string "<.*\\([0-9]\\{2\\}:[0-9]\\{2\\}\\).*>"
        org-alert-match-string (concat "SCHEDULED>=\"<today>\"+SCHEDULED<\"<tomorrow>\""
                                       "|DEADLINE>=\"<today>\"+DEADLINE<\"<tomorrow>\""
                                       "|TIMESTAMP>=\"<today>\"+TIMESTAMP<\"<tomorrow>\""))
  (advice-add
    #'org-alert--check-time :override
    #'wal/advise-org-alert--check-time)
  (org-alert-enable)
  :demand
  :after org-agenda
  :ensure nil)
#+END_SRC

** json-mode

The only way to store strings, JSON.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/json-mode ()
  "Hook into `json-mode'."
  (wal/message-in-a-bottle '("JSON ...? JSON?! JSON!!"))
  (rainbow-delimiters-mode)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (flycheck-mode 1))

(use-package json-mode
  :wal-ways nil
  :mode "\\.arb\\'"
  :hook (json-mode . wal/json-mode)
  :ensure nil)
#+END_SRC

** explain-pause-mode

Check what's slowing down Emacs.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package explain-pause-mode
  :config
  (when wal/doctor
    (explain-pause-mode +1))
  :general
  (wal/captain
    "?" '(explain-pause-top :wk "explain pauses"))
  :quelpa
  (explain-pause-mode :fetcher github :repo "lastquestion/explain-pause-mode")
  :defer 3)
#+END_SRC

* Other Settings

These are other settings that used to be in my config.

** Time

Don't show the CPU load if time is shown.

#+BEGIN_SRC emacs-lisp :tangle no
(setq display-time-default-load-average nil
      display-time-format "%k:%M ")

;; Note that turning this on will persist the mode in your custom.el,
;; so delete it from there if you want it gone again.
(display-time-mode -1)
#+END_SRC

* LSP Server Configurations

Configure or register language servers that aren't as straight
forward.

** Elixir (elixir-ls)

#+BEGIN_SRC emacs-lisp
(defcustom elixir-ls-release-location (expand-file-name "ls/elixir" user-emacs-directory)
  "Location of the Elixir language server."
  :type 'file
  :group 'wal-lsp)

;; Add executable to path.
(add-hook 'emacs-startup-hook
          (lambda ()
            (when (file-exists-p (expand-file-name
                                  "language_server.sh"
                                  elixir-ls-release-location))
              (add-to-list 'exec-path elixir-ls-release-location))))
#+END_SRC

** Prolog (swipl)
:PROPERTIES:
:UNNUMBERED: t
:END:

=?-likes(krister, Prolog).=

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'lsp-mode
  (with-suppressed-warnings
      (lsp-register-client
       (make-lsp-client
        :new-connection
        (lsp-stdio-connection (list "swipl"
                                    "-g" "use_module(library(lsp_server))."
                                    "-g" "lsp_server:main"
                                    "-t" "halt"
                                    "--" "stdio"))
        :major-modes '(prolog-mode)
        :priority 1
        :multi-root t
        :server-id 'prolog-ls))))
#+END_SRC

* Functions

These are functions that used to be in my config.

** Theme Light Switch

I rarely ever used this.

#+BEGIN_SRC emacs-lisp :tangle no
;; Two themes and a switch.
(defvar wal/primary-emacs-theme 'kaolin-valley-dark
  "The quote-unquote default Emacs theme.")

(defvar wal/secondary-emacs-theme 'kaolin-valley-light
  "The non-default Emacs theme.")

(defun wal/light-switch (&optional selection)
  "Switch to SELECTION or from light to dark theme and vice-versa."
  (interactive)
  (disable-theme wal/active-theme)
  (cond ((or (equal wal/active-theme wal/primary-emacs-theme) (equal selection 'secondary))
         (load-theme wal/secondary-emacs-theme t)
         (setq wal/active-theme wal/secondary-emacs-theme))
        ((or (equal wal/active-theme wal/secondary-emacs-theme) (equal selection 'primary))
         (load-theme wal/primary-emacs-theme t)
         (setq wal/active-theme wal/primary-emacs-theme))))

(defun wal/advise-counsel-load-theme (theme)
  "Advise to also update `wal/*-emacs-theme'."
  (if (eq wal/primary-emacs-theme wal/active-theme)
      (setq wal/primary-emacs-theme (intern theme))
    (setq wal/secondary-emacs-theme (intern theme)))
  (setq wal/active-theme (intern theme)))

;; Any theme set by `counsel-load-theme' should also set
;; `wal/*-theme' so that calling `wal/light-switch' doesn't
;; undo things.
(advice-add 'counsel-load-theme :filter-return #'wal/advise-counsel-load-theme)
#+END_SRC

** Go to line and char with =avy=

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/avy-goto-line-and-char ()
  "Go to line and then to char in line.
Just goes to line if line is empty."
  (interactive)
  (avy-goto-line)
  (let ((line-length (save-excursion (end-of-line) (current-column))))
    (unless (zerop line-length)
      (let ((char (read-char "char: " t)))
        (avy-goto-char-in-line char)))))
#+END_SRC

** Display =magit-status= buffers in new frame

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/magit-display-buffer-new-frame-status (buffer)
  "Display BUFFER in new frame if it is a status buffer.
Otherwise use `magit-display-buffer-traditional'.

It probably makes sense to bind `q' to `delete-frame' in
`magit-status-mode-map' when using this function."
  (if (eq (with-current-buffer buffer major-mode)
          'magit-status-mode)
      (display-buffer buffer '(display-buffer-pop-up-frame))
    (magit-display-buffer-traditional buffer)))
#+END_SRC

** Find local node binary

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/find-local-node-binary (local-binary)
  "Find LOCAL-BINARY in project's node_modules."
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (bin
          (and root
               (expand-file-name (concat "node_modules/.bin/" local-binary)
                                 root))))
    (when (and bin (file-executable-p bin))
      bin)))
#+END_SRC

** Showing =vterm=

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/advise-vterm-toggle (&rest _r)
  "Advise `vterm-toggle' to show unless the window is a vterm buffer."
  (unless (derived-mode-p 'vterm-mode)
    (vterm-toggle-show)))
#+END_SRC
